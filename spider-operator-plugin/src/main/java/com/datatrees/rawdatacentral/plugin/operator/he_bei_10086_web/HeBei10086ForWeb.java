package com.datatrees.rawdatacentral.plugin.operator.he_bei_10086_web;

import javax.script.Invocable;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

import com.datatrees.common.util.PatternUtils;
import com.datatrees.crawler.core.util.xpath.XPathUtil;
import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.rawdatacentral.common.utils.TemplateUtils;
import com.datatrees.spider.share.domain.RequestType;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.spider.operator.domain.model.OperatorParam;
import com.datatrees.spider.operator.service.OperatorPluginService;
import com.datatrees.spider.share.domain.ErrorCode;
import com.datatrees.spider.share.domain.FormType;
import com.datatrees.spider.share.domain.HttpResult;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;

/**
 * Created by guimeichao on 17/9/11.
 */
public class HeBei10086ForWeb implements OperatorPluginService {

    private static final Logger logger     = LoggerFactory.getLogger(HeBei10086ForWeb.class);

    private static final String javaScript
                                           = "";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String referer = "http://www.10086.cn/he/index_311_311.html";
            String templateUrl = "https://he.ac.10086.cn/login";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET).setFullUrl(templateUrl).setReferer(referer)
                    .invoke();
            String pageContent = response.getPageContent();

            String displayPics = PatternUtils.group(pageContent, "name=\"displayPics\" value=\"([^\"]+)\"", 1);
            String displayPic = PatternUtils.group(pageContent, "name=\"displayPic\" value=\"([^\"]+)\"", 1);
            String loginType = PatternUtils.group(pageContent, "name=\"type\" value=\"([^\"]+)\"", 1);
            String formerLoginType = PatternUtils.group(pageContent, "name=\"formertype\" value=\"([^\"]+)\"", 1);
            String backurl = PatternUtils.group(pageContent, "name=\"backurl\" value=\"([^\"]+)\"", 1);
            String warnurl = PatternUtils.group(pageContent, "name=\"warnurl\" value=\"([^\"]+)\"", 1);
            String spid = PatternUtils.group(pageContent, "name=\"spid\" value=\"([^\"]+)\"", 1);
            String relayState = PatternUtils.group(pageContent, "name=\"RelayState\" value=\"([^\"]+)\"", 1);

            TaskUtils.addTaskShare(param.getTaskId(), "displayPics", displayPics);
            TaskUtils.addTaskShare(param.getTaskId(), "displayPic", displayPic);
            TaskUtils.addTaskShare(param.getTaskId(), "loginType", loginType);
            TaskUtils.addTaskShare(param.getTaskId(), "formerLoginType", formerLoginType);
            TaskUtils.addTaskShare(param.getTaskId(), "backurl", backurl);
            TaskUtils.addTaskShare(param.getTaskId(), "warnurl", warnurl);
            TaskUtils.addTaskShare(param.getTaskId(), "spid", spid);
            TaskUtils.addTaskShare(param.getTaskId(), "relayState", relayState);

            return result.success();
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshPicCodeForLogin(param);
            default:
                return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return validatePicCodeForLogin(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return new HttpResult<Object>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    private HttpResult<String> refeshPicCodeForLogin(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        BigDecimal db = new BigDecimal(Math.random() * (1 - 0) + 0);
        Response response = null;
        try {
            String templateUrl = "https://he.ac.10086.cn/common/image.jsp?l={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET)
                    .setFullUrl(templateUrl, db.setScale(16, BigDecimal.ROUND_HALF_UP)).invoke();
            logger.info("登录-->图片验证码-->刷新成功,param={}", param);
            return result.success(response.getPageContentForBase64());
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> validatePicCodeForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        BigDecimal db = new BigDecimal(Math.random() * (1 - 0) + 0);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "https://he.ac.10086.cn/validImageCode?r_{}&imageCode={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET)
                    .setFullUrl(templateUrl, db.setScale(16, BigDecimal.ROUND_HALF_UP), param.getPicCode())
                    .addHeader("X-Requested-With", "XMLHttpRequest").invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "1")) {
                logger.info("登录-->图片验证码-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("登录-->图片验证码-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_PIC_CODE_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_PIC_CODE_ERROR);
        }
    }

    public HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPassword(), ErrorCode.EMPTY_PASSWORD);
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_SMS_CODE);
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        HttpResult<Map<String, Object>> result = validatePicCode(param);
        if (!result.getStatus()) {
            return result;
        }
        Response response = null;
        try {
            String displayPics = TaskUtils.getTaskShare(param.getTaskId(), "displayPics");
            String displayPic = TaskUtils.getTaskShare(param.getTaskId(), "displayPic");
            String loginType = TaskUtils.getTaskShare(param.getTaskId(), "loginType");
            String formerLoginType = TaskUtils.getTaskShare(param.getTaskId(), "formerLoginType");
            String backurl = TaskUtils.getTaskShare(param.getTaskId(), "backurl");
            String warnurl = TaskUtils.getTaskShare(param.getTaskId(), "warnurl");
            String spid = TaskUtils.getTaskShare(param.getTaskId(), "spid");
            String relayState = TaskUtils.getTaskShare(param.getTaskId(), "relayState");

            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("he_bei_10086_web/des.js");
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript);
            String encodePassword = invocable.invokeFunction("enString", param.getPassword().toString()).toString();

            String templateUrl = "https://he.ac.10086.cn/Login?displayPics={}&displayPic={}&type={}&formertype={}" +
                    "&backurl={}&warnurl={}&spid={}&RelayState={}&mobileNum={}&userIdTemp={}&servicePassword={}" +
                    "&emailPwd=&smsValidCode=&login_pwd_type=&email=输入Email邮箱地址&validCode={}&emailPwd=请输入密码&servicePassword=请输入6" +
                    "位数字的服务密码&smsValidCode=";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, displayPics, displayPic, loginType, formerLoginType, backurl, warnurl, spid, relayState,
                            param.getMobile(), param.getMobile(), encodePassword, param.getPicCode()).invoke();
            String pageContent = response.getPageContent();
            if (pageContent.contains("服务密码错误")) {
                if (pageContent.contains("账号已被锁定，请明天再试")) {
                    logger.warn("登录失败-->密码错误次数超过限制，账号已被锁定，请明天再试,param={}", param);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                }
                logger.warn("登录失败-->账户名与密码不匹配,param={}", param);
                return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
            }
            if (pageContent.contains("图片验证码已失效")) {
                logger.warn("登录失败-->图片验证码已失效,param={}", param);
                return result.failure(ErrorCode.VALIDATE_PIC_CODE_FAIL);
            }

            List<String> relayStateList = XPathUtil.getXpath("//input[@name='RelayState']/@value", pageContent);
            if (!CollectionUtils.isEmpty(relayStateList)) {
                relayState = relayStateList.get(0);
            }
            String samLart = StringUtils.EMPTY;
            List<String> samLartList = XPathUtil.getXpath("//input[@name='SAMLart']/@value", pageContent);
            if (!CollectionUtils.isEmpty(samLartList)) {
                samLart = samLartList.get(0);
            }
            List<String> displayPicList = XPathUtil.getXpath("//input[@name='displayPic']/@value", pageContent);
            if (!CollectionUtils.isEmpty(displayPicList)) {
                displayPic = displayPicList.get(0);
            }
            List<String> displayPicsList = XPathUtil.getXpath("//input[@name='displayPics']/@value", pageContent);
            if (!CollectionUtils.isEmpty(displayPicsList)) {
                displayPics = displayPicsList.get(0);
            }
            String isEncodePassword = StringUtils.EMPTY;
            List<String> isEncodePasswordList = XPathUtil.getXpath("//input[@name='isEncodePassword']/@value", pageContent);
            if (!CollectionUtils.isEmpty(isEncodePasswordList)) {
                isEncodePassword = isEncodePasswordList.get(0);
            }

            templateUrl
                    = "https://he.ac.10086.cn//hblogin/backPage.jsp?SAMLart={}&isEncodePassword={}&displayPic={}&RelayState={}&isEncodeMobile=1&displayPics={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, samLart, isEncodePassword, displayPic, relayState, displayPics).invoke();
            if (StringUtils.isBlank(response.getContentType())) {
                logger.error("登陆失败,param={},response={}", param, response);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }

            relayStateList = XPathUtil.getXpath("//input[@name='RelayState']/@value", pageContent);
            if (!CollectionUtils.isEmpty(relayStateList)) {
                relayState = relayStateList.get(0);
            }
            samLartList = XPathUtil.getXpath("//input[@name='SAMLart']/@value", pageContent);
            if (!CollectionUtils.isEmpty(samLartList)) {
                samLart = samLartList.get(0);
            }

            /**
             * 此处post请求的body参数不能放进地址，
             * 否则会导致重定向url拥有不该有的参数
             */
            templateUrl = "http://www.he.10086.cn/my";
            String templateData = "SAMLart={}&RelayState={}";
            String data = TemplateUtils.format(templateData, URLEncoder.encode(samLart, "UTF-8"), URLEncoder.encode(relayState, "UTF-8"));
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST).setFullUrl(templateUrl).setRequestBody(data)
                    .invoke();

            //String redirectUrl = "http://www.he.10086.cn/my/account/";
            //response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST).setFullUrl(redirectUrl).invoke();
            pageContent = response.getPageContent();

            relayStateList = XPathUtil.getXpath("//input[@name='RelayState']/@value", pageContent);
            if (!CollectionUtils.isEmpty(relayStateList)) {
                relayState = relayStateList.get(0);
            }
            samLartList = XPathUtil.getXpath("//input[@name='SAMLRequest']/@value", pageContent);
            if (!CollectionUtils.isEmpty(samLartList)) {
                samLart = samLartList.get(0);
            }

            String referer = "http://www.he.10086.cn/my/";
            templateUrl = "http://he.ac.10086.cn/POST?SAMLRequest={}&RelayState={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, URLEncoder.encode(samLart, "UTF-8"), URLEncoder.encode(relayState, "UTF-8")).setReferer(referer)
                    .invoke();
            pageContent = response.getPageContent();

            relayStateList = XPathUtil.getXpath("//input[@name='RelayState']/@value", pageContent);
            if (!CollectionUtils.isEmpty(relayStateList)) {
                relayState = relayStateList.get(0);
            }
            samLartList = XPathUtil.getXpath("//input[@name='SAMLart']/@value", pageContent);
            if (!CollectionUtils.isEmpty(samLartList)) {
                samLart = samLartList.get(0);
            }
            displayPicList = XPathUtil.getXpath("//input[@name='displayPic']/@value", pageContent);
            if (!CollectionUtils.isEmpty(displayPicList)) {
                displayPic = displayPicList.get(0);
            }
            displayPicsList = XPathUtil.getXpath("//input[@name='displayPics']/@value", pageContent);
            if (!CollectionUtils.isEmpty(displayPicsList)) {
                displayPics = displayPicsList.get(0);
            }
            isEncodePasswordList = XPathUtil.getXpath("//input[@name='isEncodePassword']/@value", pageContent);
            if (CollectionUtils.isEmpty(isEncodePasswordList)) {
                isEncodePassword = isEncodePasswordList.get(0);
            }

            templateUrl = "http://www.he.10086.cn/my/?SAMLart={}&isEncodePassword={}&displayPic={}&RelayState={}&displayPics={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, samLart, isEncodePassword, displayPic, relayState, displayPics).invoke();

            templateUrl = "http://www.he.10086.cn/my/account/";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET).setFullUrl(templateUrl).invoke();
            pageContent = response.getPageContent();
            if (pageContent.contains(param.getMobile().toString())) {
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},response={}", param, response);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        BigDecimal db = new BigDecimal(Math.random() * (1 - 0) + 0);
        Response response = null;
        try {
            String templateUrl = "http://www.he.10086.cn/service/fee/qryDetailBill.action?menuid=qryDetailBill&pageId={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET)
                    .setFullUrl(templateUrl, db.setScale(17, BigDecimal.ROUND_HALF_UP)).invoke();
            String pageContent = response.getPageContent();

            String relayState = StringUtils.EMPTY;
            List<String> relayStateList = XPathUtil.getXpath("//input[@name='RelayState']/@value", pageContent);
            if (!CollectionUtils.isEmpty(relayStateList)) {
                relayState = relayStateList.get(0);
            }
            String samLart = StringUtils.EMPTY;
            List<String> samLartList = XPathUtil.getXpath("//input[@name='SAMLRequest']/@value", pageContent);
            if (!CollectionUtils.isEmpty(samLartList)) {
                samLart = samLartList.get(0);
            }
            samLart = samLart.replace(" ", URLDecoder.decode("%0D%0A", "UTF-8"));

            templateUrl = "http://he.ac.10086.cn/POST";
            String templateData = "SAMLRequest={}&RelayState={}";
            String data = TemplateUtils.format(templateData, samLart, relayState);
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST).setFullUrl(templateUrl).setRequestBody(data)
                    .invoke();
            pageContent = response.getPageContent();

            relayStateList = XPathUtil.getXpath("//input[@name='RelayState']/@value", pageContent);
            if (!CollectionUtils.isEmpty(relayStateList)) {
                relayState = relayStateList.get(0);
            }
            samLartList = XPathUtil.getXpath("//input[@name='SAMLart']/@value", pageContent);
            if (!CollectionUtils.isEmpty(samLartList)) {
                samLart = samLartList.get(0);
            }
            String displayPic = StringUtils.EMPTY;
            List<String> displayPicList = XPathUtil.getXpath("//input[@name='displayPic']/@value", pageContent);
            if (!CollectionUtils.isEmpty(displayPicList)) {
                displayPic = displayPicList.get(0);
            }
            String displayPics = StringUtils.EMPTY;
            List<String> displayPicsList = XPathUtil.getXpath("//input[@name='displayPics']/@value", pageContent);
            if (!CollectionUtils.isEmpty(displayPicsList)) {
                displayPics = displayPicsList.get(0);
            }
            String isEncodePassword = StringUtils.EMPTY;
            List<String> isEncodePasswordList = XPathUtil.getXpath("//input[@name='isEncodePassword']/@value", pageContent);
            if (!CollectionUtils.isEmpty(isEncodePasswordList)) {
                isEncodePassword = isEncodePasswordList.get(0);
            }

            templateUrl = "http://www.he.10086.cn/service/login!initLogin" +
                    ".action?SAMLart={}&isEncodePassword={}&displayPic={}&RelayState={}&displayPics={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, samLart, isEncodePassword, displayPic, relayState, displayPics).invoke();

            templateUrl = "http://www.he.10086.cn/service/fee/qryDetailBill.action";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET).setFullUrl(templateUrl).invoke();

            templateUrl = "http://www.he.10086.cn/service/fee/fee/qryDetailBill!sendRandomCode.action?r={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, db.setScale(16, BigDecimal.ROUND_HALF_UP)).invoke();
            pageContent = response.getPageContent();
            if (pageContent.contains("result\":\"success\"")) {
                logger.info("详单-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    public HttpResult<Map<String, Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        BigDecimal db = new BigDecimal(Math.random() * (1 - 0) + 0);
        Response response = null;
        try {
            String referer = "http://www.he.10086.cn/service/fee/qryDetailBill.action";
            String templateUrl = "http://www.he.10086.cn/service/fee/qryDetailBill!checkSmsCode.action?r={}&smsrandom={}";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.POST)
                    .setFullUrl(templateUrl, db.setScale(16, BigDecimal.ROUND_HALF_UP), param.getSmsCode()).setReferer(referer, param.getMobile())
                    .addHeader("X-Requested-With", "XMLHttpRequest").setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            if (pageContent.contains("\"desc\":\"\"")) {
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->校验失败,param={},pateContent={}", param, pageContent);
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }
    }
}
