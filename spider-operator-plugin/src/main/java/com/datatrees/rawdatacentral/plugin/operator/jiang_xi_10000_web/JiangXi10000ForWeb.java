package com.datatrees.rawdatacentral.plugin.operator.jiang_xi_10000_web;

import javax.script.Invocable;
import java.net.URLEncoder;
import java.util.Date;
import java.util.Map;

import com.datatrees.common.util.PatternUtils;
import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.spider.operator.domain.model.FormType;
import com.datatrees.spider.share.domain.ErrorCode;
import com.datatrees.rawdatacentral.domain.enums.RequestType;
import com.datatrees.spider.operator.domain.model.OperatorParam;
import com.datatrees.spider.share.domain.HttpResult;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.rawdatacentral.service.OperatorPluginService;
import com.ibm.icu.text.SimpleDateFormat;
import org.apache.commons.lang.StringUtils;
import org.apache.http.entity.ContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 江西电信web端
 * 登录 手机号，服务密码，短信验证码，图片验证码
 * 详单查询 短信验证码
 * User: yand
 * Date: 2017/9/28
 */
public class JiangXi10000ForWeb implements OperatorPluginService {

    private static       Logger logger          = LoggerFactory.getLogger(JiangXi10000ForWeb.class);
    private              String randomNum       = getRandomNumber();
    private static final String javaScript1
                                                = "";
    private static final String javaScript2
                                                = "Ly8gQmlnSW50LCBhIHN1aXRlIG9mIHJvdXRpbmVzIGZvciBwZXJmb3JtaW5nIG11bHRpcGxlLXByZWNpc2lvbiBhcml0aG1ldGljIGluCi8vIEphdmFTY3JpcHQuCi8vCi8vIENvcHlyaWdodCAxOTk4LTIwMDUgRGF2aWQgU2hhcGlyby4KLy8KLy8gWW91IG1heSB1c2UsIHJlLXVzZSwgYWJ1c2UsCi8vIGNvcHksIGFuZCBtb2RpZnkgdGhpcyBjb2RlIHRvIHlvdXIgbGlraW5nLCBidXQgcGxlYXNlIGtlZXAgdGhpcyBoZWFkZXIuCi8vIFRoYW5rcyEKLy8KLy8gRGF2ZSBTaGFwaXJvCi8vIGRhdmVAb2hkYXZlLmNvbQoKLy8gSU1QT1JUQU5UIFRISU5HOiBCZSBzdXJlIHRvIHNldCBtYXhEaWdpdHMgYWNjb3JkaW5nIHRvIHlvdXIgcHJlY2lzaW9uCi8vIG5lZWRzLiBVc2UgdGhlIHNldE1heERpZ2l0cygpIGZ1bmN0aW9uIHRvIGRvIHRoaXMuIFNlZSBjb21tZW50cyBiZWxvdy4KLy8KLy8gVHdlYWtlZCBieSBJYW4gQnVubmluZwovLyBBbHRlcmF0aW9uczoKLy8gRml4IGJ1ZyBpbiBmdW5jdGlvbiBiaUZyb21IZXgocykgdG8gYWxsb3cKLy8gcGFyc2luZyBvZiBzdHJpbmdzIG9mIGxlbmd0aCAhPSAwIChtb2QgNCkKCi8vIENoYW5nZXMgbWFkZSBieSBEYXZlIFNoYXBpcm8gYXMgb2YgMTIvMzAvMjAwNDoKLy8KLy8gVGhlIEJpZ0ludCgpIGNvbnN0cnVjdG9yIGRvZXNuJ3QgdGFrZSBhIHN0cmluZyBhbnltb3JlLiBJZiB5b3Ugd2FudCB0bwovLyBjcmVhdGUgYSBCaWdJbnQgZnJvbSBhIHN0cmluZywgdXNlIGJpRnJvbURlY2ltYWwoKSBmb3IgYmFzZS0xMAovLyByZXByZXNlbnRhdGlvbnMsIGJpRnJvbUhleCgpIGZvciBiYXNlLTE2IHJlcHJlc2VudGF0aW9ucywgb3IKLy8gYmlGcm9tU3RyaW5nKCkgZm9yIGJhc2UtMi10by0zNiByZXByZXNlbnRhdGlvbnMuCi8vCi8vIGJpRnJvbUFycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGJpQ29weSgpIGluc3RlYWQsIHBhc3NpbmcgYSBCaWdJbnQKLy8gaW5zdGVhZCBvZiBhbiBhcnJheS4KLy8KLy8gVGhlIEJpZ0ludCgpIGNvbnN0cnVjdG9yIG5vdyBvbmx5IGNvbnN0cnVjdHMgYSB6ZXJvZWQtb3V0IGFycmF5LgovLyBBbHRlcm5hdGl2ZWx5LCBpZiB5b3UgcGFzcyA8dHJ1ZT4sIGl0IHdvbid0IGNvbnN0cnVjdCBhbnkgYXJyYXkuIFNlZSB0aGUKLy8gYmlDb3B5KCkgbWV0aG9kIGZvciBhbiBleGFtcGxlIG9mIHRoaXMuCi8vCi8vIEJlIHN1cmUgdG8gc2V0IG1heERpZ2l0cyBkZXBlbmRpbmcgb24geW91ciBwcmVjaXNpb24gbmVlZHMuIFRoZSBkZWZhdWx0Ci8vIHplcm9lZC1vdXQgYXJyYXkgWkVST19BUlJBWSBpcyBjb25zdHJ1Y3RlZCBpbnNpZGUgdGhlIHNldE1heERpZ2l0cygpCi8vIGZ1bmN0aW9uLiBTbyB1c2UgdGhpcyBmdW5jdGlvbiB0byBzZXQgdGhlIHZhcmlhYmxlLiBET04nVCBKVVNUIFNFVCBUSEUKLy8gVkFMVUUuIFVTRSBUSEUgRlVOQ1RJT04uCi8vCi8vIFpFUk9fQVJSQVkgZXhpc3RzIHRvIGhvcGVmdWxseSBzcGVlZCB1cCBjb25zdHJ1Y3Rpb24gb2YgQmlnSW50cygpLiBCeQovLyBwcmVjYWxjdWxhdGluZyB0aGUgemVybyBhcnJheSwgd2UgY2FuIGp1c3QgdXNlIHNsaWNlKDApIHRvIG1ha2UgY29waWVzIG9mCi8vIGl0LiBQcmVzdW1hYmx5IHRoaXMgY2FsbHMgZmFzdGVyIG5hdGl2ZSBjb2RlLCBhcyBvcHBvc2VkIHRvIHNldHRpbmcgdGhlCi8vIGVsZW1lbnRzIG9uZSBhdCBhIHRpbWUuIEkgaGF2ZSBub3QgZG9uZSBhbnkgdGltaW5nIHRlc3RzIHRvIHZlcmlmeSB0aGlzCi8vIGNsYWltLgoKLy8gTWF4IG51bWJlciA9IDEwXjE2IC0gMiA9IDk5OTk5OTk5OTk5OTk5OTg7Ci8vICAgICAgICAgICAgICAgMl41MyAgICAgPSA5MDA3MTk5MjU0NzQwOTkyOwoKdmFyIGJpUmFkaXhCYXNlID0gMjsKdmFyIGJpUmFkaXhCaXRzID0gMTY7CnZhciBiaXRzUGVyRGlnaXQgPSBiaVJhZGl4Qml0czsKdmFyIGJpUmFkaXggPSAxIDw8IDE2OyAvLyA9IDJeMTYgPSA2NTUzNgp2YXIgYmlIYWxmUmFkaXggPSBiaVJhZGl4ID4+PiAxOwp2YXIgYmlSYWRpeFNxdWFyZWQgPSBiaVJhZGl4ICogYmlSYWRpeDsKdmFyIG1heERpZ2l0VmFsID0gYmlSYWRpeCAtIDE7CnZhciBtYXhJbnRlZ2VyID0gOTk5OTk5OTk5OTk5OTk5ODsgCgovLyBtYXhEaWdpdHM6Ci8vIENoYW5nZSB0aGlzIHRvIGFjY29tbW9kYXRlIHlvdXIgbGFyZ2VzdCBudW1iZXIgc2l6ZS4gVXNlIHNldE1heERpZ2l0cygpCi8vIHRvIGNoYW5nZSBpdCEKLy8KLy8gSW4gZ2VuZXJhbCwgaWYgeW91J3JlIHdvcmtpbmcgd2l0aCBudW1iZXJzIG9mIHNpemUgTiBiaXRzLCB5b3UnbGwgbmVlZCAyKk4KLy8gYml0cyBvZiBzdG9yYWdlLiBFYWNoIGRpZ2l0IGhvbGRzIDE2IGJpdHMuIFNvLCBhIDEwMjQtYml0IGtleSB3aWxsIG5lZWQKLy8KLy8gMTAyNCAqIDIgLyAxNiA9IDEyOCBkaWdpdHMgb2Ygc3RvcmFnZS4KLy8KCnZhciBtYXhEaWdpdHM7CnZhciBaRVJPX0FSUkFZOwp2YXIgYmlnWmVybywgYmlnT25lOwoKZnVuY3Rpb24gc2V0TWF4RGlnaXRzKHZhbHVlKQp7CgltYXhEaWdpdHMgPSB2YWx1ZTsKCVpFUk9fQVJSQVkgPSBuZXcgQXJyYXkobWF4RGlnaXRzKTsKCWZvciAodmFyIGl6YSA9IDA7IGl6YSA8IFpFUk9fQVJSQVkubGVuZ3RoOyBpemErKykgWkVST19BUlJBWVtpemFdID0gMDsKCWJpZ1plcm8gPSBuZXcgQmlnSW50KCk7CgliaWdPbmUgPSBuZXcgQmlnSW50KCk7CgliaWdPbmUuZGlnaXRzWzBdID0gMTsKfQoKc2V0TWF4RGlnaXRzKDEyOSk7CgovLyBUaGUgbWF4aW11bSBudW1iZXIgb2YgZGlnaXRzIGluIGJhc2UgMTAgeW91IGNhbiBjb252ZXJ0IHRvIGFuCi8vIGludGVnZXIgd2l0aG91dCBKYXZhU2NyaXB0IHRocm93aW5nIHVwIG9uIHlvdS4KdmFyIGRwbDEwID0gMTU7Ci8vIGxyMTAgPSAxMCBeIGRwbDEwCnZhciBscjEwID0gYmlGcm9tTnVtYmVyKDEwMDAwMDAwMDAwMDAwMDApOwoKZnVuY3Rpb24gQmlnSW50KGZsYWcpCnsKCWlmICh0eXBlb2YgZmxhZyA9PSAiYm9vbGVhbiIgJiYgZmxhZyA9PSB0cnVlKSB7CgkJdGhpcy5kaWdpdHMgPSBudWxsOwoJfQoJZWxzZSB7CgkJdGhpcy5kaWdpdHMgPSBaRVJPX0FSUkFZLnNsaWNlKDApOwoJfQoJdGhpcy5pc05lZyA9IGZhbHNlOwp9CgpmdW5jdGlvbiBiaUZyb21EZWNpbWFsKHMpCnsKCXZhciBpc05lZyA9IHMuY2hhckF0KDApID09ICctJzsKCXZhciBpID0gaXNOZWcgPyAxIDogMDsKCXZhciByZXN1bHQ7CgkvLyBTa2lwIGxlYWRpbmcgemVyb3MuCgl3aGlsZSAoaSA8IHMubGVuZ3RoICYmIHMuY2hhckF0KGkpID09ICcwJykgKytpOwoJaWYgKGkgPT0gcy5sZW5ndGgpIHsKCQlyZXN1bHQgPSBuZXcgQmlnSW50KCk7Cgl9CgllbHNlIHsKCQl2YXIgZGlnaXRDb3VudCA9IHMubGVuZ3RoIC0gaTsKCQl2YXIgZmdsID0gZGlnaXRDb3VudCAlIGRwbDEwOwoJCWlmIChmZ2wgPT0gMCkgZmdsID0gZHBsMTA7CgkJcmVzdWx0ID0gYmlGcm9tTnVtYmVyKE51bWJlcihzLnN1YnN0cihpLCBmZ2wpKSk7CgkJaSArPSBmZ2w7CgkJd2hpbGUgKGkgPCBzLmxlbmd0aCkgewoJCQlyZXN1bHQgPSBiaUFkZChiaU11bHRpcGx5KHJlc3VsdCwgbHIxMCksCgkJCSAgICAgICAgICAgICAgIGJpRnJvbU51bWJlcihOdW1iZXIocy5zdWJzdHIoaSwgZHBsMTApKSkpOwoJCQlpICs9IGRwbDEwOwoJCX0KCQlyZXN1bHQuaXNOZWcgPSBpc05lZzsKCX0KCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGJpQ29weShiaSkKewoJdmFyIHJlc3VsdCA9IG5ldyBCaWdJbnQodHJ1ZSk7CglyZXN1bHQuZGlnaXRzID0gYmkuZGlnaXRzLnNsaWNlKDApOwoJcmVzdWx0LmlzTmVnID0gYmkuaXNOZWc7CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaUZyb21OdW1iZXIoaSkKewoJdmFyIHJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCXJlc3VsdC5pc05lZyA9IGkgPCAwOwoJaSA9IE1hdGguYWJzKGkpOwoJdmFyIGogPSAwOwoJd2hpbGUgKGkgPiAwKSB7CgkJcmVzdWx0LmRpZ2l0c1tqKytdID0gaSAmIG1heERpZ2l0VmFsOwoJCWkgPSBNYXRoLmZsb29yKGkgLyBiaVJhZGl4KTsKCX0KCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIHJldmVyc2VTdHIocykKewoJdmFyIHJlc3VsdCA9ICIiOwoJZm9yICh2YXIgaSA9IHMubGVuZ3RoIC0gMTsgaSA+IC0xOyAtLWkpIHsKCQlyZXN1bHQgKz0gcy5jaGFyQXQoaSk7Cgl9CglyZXR1cm4gcmVzdWx0Owp9Cgp2YXIgaGV4YXRyaWdlc2ltYWxUb0NoYXIgPSBuZXcgQXJyYXkoCiAnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsCiAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsCiAnaycsICdsJywgJ20nLCAnbicsICdvJywgJ3AnLCAncScsICdyJywgJ3MnLCAndCcsCiAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onCik7CgpmdW5jdGlvbiBiaVRvU3RyaW5nKHgsIHJhZGl4KQoJLy8gMiA8PSByYWRpeCA8PSAzNgp7Cgl2YXIgYiA9IG5ldyBCaWdJbnQoKTsKCWIuZGlnaXRzWzBdID0gcmFkaXg7Cgl2YXIgcXIgPSBiaURpdmlkZU1vZHVsbyh4LCBiKTsKCXZhciByZXN1bHQgPSBoZXhhdHJpZ2VzaW1hbFRvQ2hhcltxclsxXS5kaWdpdHNbMF1dOwoJd2hpbGUgKGJpQ29tcGFyZShxclswXSwgYmlnWmVybykgPT0gMSkgewoJCXFyID0gYmlEaXZpZGVNb2R1bG8ocXJbMF0sIGIpOwoJCWRpZ2l0ID0gcXJbMV0uZGlnaXRzWzBdOwoJCXJlc3VsdCArPSBoZXhhdHJpZ2VzaW1hbFRvQ2hhcltxclsxXS5kaWdpdHNbMF1dOwoJfQoJcmV0dXJuICh4LmlzTmVnID8gIi0iIDogIiIpICsgcmV2ZXJzZVN0cihyZXN1bHQpOwp9CgpmdW5jdGlvbiBiaVRvRGVjaW1hbCh4KQp7Cgl2YXIgYiA9IG5ldyBCaWdJbnQoKTsKCWIuZGlnaXRzWzBdID0gMTA7Cgl2YXIgcXIgPSBiaURpdmlkZU1vZHVsbyh4LCBiKTsKCXZhciByZXN1bHQgPSBTdHJpbmcocXJbMV0uZGlnaXRzWzBdKTsKCXdoaWxlIChiaUNvbXBhcmUocXJbMF0sIGJpZ1plcm8pID09IDEpIHsKCQlxciA9IGJpRGl2aWRlTW9kdWxvKHFyWzBdLCBiKTsKCQlyZXN1bHQgKz0gU3RyaW5nKHFyWzFdLmRpZ2l0c1swXSk7Cgl9CglyZXR1cm4gKHguaXNOZWcgPyAiLSIgOiAiIikgKyByZXZlcnNlU3RyKHJlc3VsdCk7Cn0KCnZhciBoZXhUb0NoYXIgPSBuZXcgQXJyYXkoJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLAogICAgICAgICAgICAgICAgICAgICAgICAgICdhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZicpOwoKZnVuY3Rpb24gZGlnaXRUb0hleChuKQp7Cgl2YXIgbWFzayA9IDB4ZjsKCXZhciByZXN1bHQgPSAiIjsKCWZvciAoaSA9IDA7IGkgPCA0OyArK2kpIHsKCQlyZXN1bHQgKz0gaGV4VG9DaGFyW24gJiBtYXNrXTsKCQluID4+Pj0gNDsKCX0KCXJldHVybiByZXZlcnNlU3RyKHJlc3VsdCk7Cn0KCmZ1bmN0aW9uIGJpVG9IZXgoeCkKewoJdmFyIHJlc3VsdCA9ICIiOwoJdmFyIG4gPSBiaUhpZ2hJbmRleCh4KTsKCWZvciAodmFyIGkgPSBiaUhpZ2hJbmRleCh4KTsgaSA+IC0xOyAtLWkpIHsKCQlyZXN1bHQgKz0gZGlnaXRUb0hleCh4LmRpZ2l0c1tpXSk7Cgl9CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBjaGFyVG9IZXgoYykKewoJdmFyIFpFUk8gPSA0ODsKCXZhciBOSU5FID0gWkVSTyArIDk7Cgl2YXIgbGl0dGxlQSA9IDk3OwoJdmFyIGxpdHRsZVogPSBsaXR0bGVBICsgMjU7Cgl2YXIgYmlnQSA9IDY1OwoJdmFyIGJpZ1ogPSA2NSArIDI1OwoJdmFyIHJlc3VsdDsKCglpZiAoYyA+PSBaRVJPICYmIGMgPD0gTklORSkgewoJCXJlc3VsdCA9IGMgLSBaRVJPOwoJfSBlbHNlIGlmIChjID49IGJpZ0EgJiYgYyA8PSBiaWdaKSB7CgkJcmVzdWx0ID0gMTAgKyBjIC0gYmlnQTsKCX0gZWxzZSBpZiAoYyA+PSBsaXR0bGVBICYmIGMgPD0gbGl0dGxlWikgewoJCXJlc3VsdCA9IDEwICsgYyAtIGxpdHRsZUE7Cgl9IGVsc2UgewoJCXJlc3VsdCA9IDA7Cgl9CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBoZXhUb0RpZ2l0KHMpCnsKCXZhciByZXN1bHQgPSAwOwoJdmFyIHNsID0gTWF0aC5taW4ocy5sZW5ndGgsIDQpOwoJZm9yICh2YXIgaSA9IDA7IGkgPCBzbDsgKytpKSB7CgkJcmVzdWx0IDw8PSA0OwoJCXJlc3VsdCB8PSBjaGFyVG9IZXgocy5jaGFyQ29kZUF0KGkpKQoJfQoJcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gYmlGcm9tSGV4KHMpCnsKCXZhciByZXN1bHQgPSBuZXcgQmlnSW50KCk7Cgl2YXIgc2wgPSBzLmxlbmd0aDsKCWZvciAodmFyIGkgPSBzbCwgaiA9IDA7IGkgPiAwOyBpIC09IDQsICsraikgewoJCXJlc3VsdC5kaWdpdHNbal0gPSBoZXhUb0RpZ2l0KHMuc3Vic3RyKE1hdGgubWF4KGkgLSA0LCAwKSwgTWF0aC5taW4oaSwgNCkpKTsKCX0KCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGJpRnJvbVN0cmluZyhzLCByYWRpeCkKewoJdmFyIGlzTmVnID0gcy5jaGFyQXQoMCkgPT0gJy0nOwoJdmFyIGlzdG9wID0gaXNOZWcgPyAxIDogMDsKCXZhciByZXN1bHQgPSBuZXcgQmlnSW50KCk7Cgl2YXIgcGxhY2UgPSBuZXcgQmlnSW50KCk7CglwbGFjZS5kaWdpdHNbMF0gPSAxOyAvLyByYWRpeF4wCglmb3IgKHZhciBpID0gcy5sZW5ndGggLSAxOyBpID49IGlzdG9wOyBpLS0pIHsKCQl2YXIgYyA9IHMuY2hhckNvZGVBdChpKTsKCQl2YXIgZGlnaXQgPSBjaGFyVG9IZXgoYyk7CgkJdmFyIGJpRGlnaXQgPSBiaU11bHRpcGx5RGlnaXQocGxhY2UsIGRpZ2l0KTsKCQlyZXN1bHQgPSBiaUFkZChyZXN1bHQsIGJpRGlnaXQpOwoJCXBsYWNlID0gYmlNdWx0aXBseURpZ2l0KHBsYWNlLCByYWRpeCk7Cgl9CglyZXN1bHQuaXNOZWcgPSBpc05lZzsKCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGJpRHVtcChiKQp7CglyZXR1cm4gKGIuaXNOZWcgPyAiLSIgOiAiIikgKyBiLmRpZ2l0cy5qb2luKCIgIik7Cn0KCmZ1bmN0aW9uIGJpQWRkKHgsIHkpCnsKCXZhciByZXN1bHQ7CgoJaWYgKHguaXNOZWcgIT0geS5pc05lZykgewoJCXkuaXNOZWcgPSAheS5pc05lZzsKCQlyZXN1bHQgPSBiaVN1YnRyYWN0KHgsIHkpOwoJCXkuaXNOZWcgPSAheS5pc05lZzsKCX0KCWVsc2UgewoJCXJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCQl2YXIgYyA9IDA7CgkJdmFyIG47CgkJZm9yICh2YXIgaSA9IDA7IGkgPCB4LmRpZ2l0cy5sZW5ndGg7ICsraSkgewoJCQluID0geC5kaWdpdHNbaV0gKyB5LmRpZ2l0c1tpXSArIGM7CgkJCXJlc3VsdC5kaWdpdHNbaV0gPSBuICUgYmlSYWRpeDsKCQkJYyA9IE51bWJlcihuID49IGJpUmFkaXgpOwoJCX0KCQlyZXN1bHQuaXNOZWcgPSB4LmlzTmVnOwoJfQoJcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gYmlTdWJ0cmFjdCh4LCB5KQp7Cgl2YXIgcmVzdWx0OwoJaWYgKHguaXNOZWcgIT0geS5pc05lZykgewoJCXkuaXNOZWcgPSAheS5pc05lZzsKCQlyZXN1bHQgPSBiaUFkZCh4LCB5KTsKCQl5LmlzTmVnID0gIXkuaXNOZWc7Cgl9IGVsc2UgewoJCXJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCQl2YXIgbiwgYzsKCQljID0gMDsKCQlmb3IgKHZhciBpID0gMDsgaSA8IHguZGlnaXRzLmxlbmd0aDsgKytpKSB7CgkJCW4gPSB4LmRpZ2l0c1tpXSAtIHkuZGlnaXRzW2ldICsgYzsKCQkJcmVzdWx0LmRpZ2l0c1tpXSA9IG4gJSBiaVJhZGl4OwoJCQkvLyBTdHVwaWQgbm9uLWNvbmZvcm1pbmcgbW9kdWx1cyBvcGVyYXRpb24uCgkJCWlmIChyZXN1bHQuZGlnaXRzW2ldIDwgMCkgcmVzdWx0LmRpZ2l0c1tpXSArPSBiaVJhZGl4OwoJCQljID0gMCAtIE51bWJlcihuIDwgMCk7CgkJfQoJCS8vIEZpeCB1cCB0aGUgbmVnYXRpdmUgc2lnbiwgaWYgYW55LgoJCWlmIChjID09IC0xKSB7CgkJCWMgPSAwOwoJCQlmb3IgKHZhciBpID0gMDsgaSA8IHguZGlnaXRzLmxlbmd0aDsgKytpKSB7CgkJCQluID0gMCAtIHJlc3VsdC5kaWdpdHNbaV0gKyBjOwoJCQkJcmVzdWx0LmRpZ2l0c1tpXSA9IG4gJSBiaVJhZGl4OwoJCQkJLy8gU3R1cGlkIG5vbi1jb25mb3JtaW5nIG1vZHVsdXMgb3BlcmF0aW9uLgoJCQkJaWYgKHJlc3VsdC5kaWdpdHNbaV0gPCAwKSByZXN1bHQuZGlnaXRzW2ldICs9IGJpUmFkaXg7CgkJCQljID0gMCAtIE51bWJlcihuIDwgMCk7CgkJCX0KCQkJLy8gUmVzdWx0IGlzIG9wcG9zaXRlIHNpZ24gb2YgYXJndW1lbnRzLgoJCQlyZXN1bHQuaXNOZWcgPSAheC5pc05lZzsKCQl9IGVsc2UgewoJCQkvLyBSZXN1bHQgaXMgc2FtZSBzaWduLgoJCQlyZXN1bHQuaXNOZWcgPSB4LmlzTmVnOwoJCX0KCX0KCXJldHVybiByZXN1bHQ7Cn0KCgpmdW5jdGlvbiBiaUhpZ2hJbmRleCh4KQp7Cgl2YXIgcmVzdWx0ID0geC5kaWdpdHMubGVuZ3RoIC0gMTsKCXdoaWxlIChyZXN1bHQgPiAwICYmIHguZGlnaXRzW3Jlc3VsdF0gPT0gMCkgLS1yZXN1bHQ7CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaU51bUJpdHMoeCkKewoJdmFyIG4gPSBiaUhpZ2hJbmRleCh4KTsKCXZhciBkID0geC5kaWdpdHNbbl07Cgl2YXIgbSA9IChuICsgMSkgKiBiaXRzUGVyRGlnaXQ7Cgl2YXIgcmVzdWx0OwoJZm9yIChyZXN1bHQgPSBtOyByZXN1bHQgPiBtIC0gYml0c1BlckRpZ2l0OyAtLXJlc3VsdCkgewoJCWlmICgoZCAmIDB4ODAwMCkgIT0gMCkgYnJlYWs7CgkJZCA8PD0gMTsKCX0KCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGJpTXVsdGlwbHkoeCwgeSkKewoJdmFyIHJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCXZhciBjOwoJdmFyIG4gPSBiaUhpZ2hJbmRleCh4KTsKCXZhciB0ID0gYmlIaWdoSW5kZXgoeSk7Cgl2YXIgdSwgdXYsIGs7CgoJZm9yICh2YXIgaSA9IDA7IGkgPD0gdDsgKytpKSB7CgkJYyA9IDA7CgkJayA9IGk7CgkJZm9yIChqID0gMDsgaiA8PSBuOyArK2osICsraykgewoJCQl1diA9IHJlc3VsdC5kaWdpdHNba10gKyB4LmRpZ2l0c1tqXSAqIHkuZGlnaXRzW2ldICsgYzsKCQkJcmVzdWx0LmRpZ2l0c1trXSA9IHV2ICYgbWF4RGlnaXRWYWw7CgkJCWMgPSB1diA+Pj4gYmlSYWRpeEJpdHM7CgkJCS8vYyA9IE1hdGguZmxvb3IodXYgLyBiaVJhZGl4KTsKCQl9CgkJcmVzdWx0LmRpZ2l0c1tpICsgbiArIDFdID0gYzsKCX0KCS8vIFNvbWVvbmUgZ2l2ZSBtZSBhIGxvZ2ljYWwgeG9yLCBwbGVhc2UuCglyZXN1bHQuaXNOZWcgPSB4LmlzTmVnICE9IHkuaXNOZWc7CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaU11bHRpcGx5RGlnaXQoeCwgeSkKewoJdmFyIG4sIGMsIHV2OwoKCXJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCW4gPSBiaUhpZ2hJbmRleCh4KTsKCWMgPSAwOwoJZm9yICh2YXIgaiA9IDA7IGogPD0gbjsgKytqKSB7CgkJdXYgPSByZXN1bHQuZGlnaXRzW2pdICsgeC5kaWdpdHNbal0gKiB5ICsgYzsKCQlyZXN1bHQuZGlnaXRzW2pdID0gdXYgJiBtYXhEaWdpdFZhbDsKCQljID0gdXYgPj4+IGJpUmFkaXhCaXRzOwoJCS8vYyA9IE1hdGguZmxvb3IodXYgLyBiaVJhZGl4KTsKCX0KCXJlc3VsdC5kaWdpdHNbMSArIG5dID0gYzsKCXJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGFycmF5Q29weShzcmMsIHNyY1N0YXJ0LCBkZXN0LCBkZXN0U3RhcnQsIG4pCnsKCXZhciBtID0gTWF0aC5taW4oc3JjU3RhcnQgKyBuLCBzcmMubGVuZ3RoKTsKCWZvciAodmFyIGkgPSBzcmNTdGFydCwgaiA9IGRlc3RTdGFydDsgaSA8IG07ICsraSwgKytqKSB7CgkJZGVzdFtqXSA9IHNyY1tpXTsKCX0KfQoKdmFyIGhpZ2hCaXRNYXNrcyA9IG5ldyBBcnJheSgweDAwMDAsIDB4ODAwMCwgMHhDMDAwLCAweEUwMDAsIDB4RjAwMCwgMHhGODAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4RkMwMCwgMHhGRTAwLCAweEZGMDAsIDB4RkY4MCwgMHhGRkMwLCAweEZGRTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHhGRkYwLCAweEZGRjgsIDB4RkZGQywgMHhGRkZFLCAweEZGRkYpOwoKZnVuY3Rpb24gYmlTaGlmdExlZnQoeCwgbikKewoJdmFyIGRpZ2l0Q291bnQgPSBNYXRoLmZsb29yKG4gLyBiaXRzUGVyRGlnaXQpOwoJdmFyIHJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCWFycmF5Q29weSh4LmRpZ2l0cywgMCwgcmVzdWx0LmRpZ2l0cywgZGlnaXRDb3VudCwKCSAgICAgICAgICByZXN1bHQuZGlnaXRzLmxlbmd0aCAtIGRpZ2l0Q291bnQpOwoJdmFyIGJpdHMgPSBuICUgYml0c1BlckRpZ2l0OwoJdmFyIHJpZ2h0Qml0cyA9IGJpdHNQZXJEaWdpdCAtIGJpdHM7Cglmb3IgKHZhciBpID0gcmVzdWx0LmRpZ2l0cy5sZW5ndGggLSAxLCBpMSA9IGkgLSAxOyBpID4gMDsgLS1pLCAtLWkxKSB7CgkJcmVzdWx0LmRpZ2l0c1tpXSA9ICgocmVzdWx0LmRpZ2l0c1tpXSA8PCBiaXRzKSAmIG1heERpZ2l0VmFsKSB8CgkJICAgICAgICAgICAgICAgICAgICgocmVzdWx0LmRpZ2l0c1tpMV0gJiBoaWdoQml0TWFza3NbYml0c10pID4+PgoJCSAgICAgICAgICAgICAgICAgICAgKHJpZ2h0Qml0cykpOwoJfQoJcmVzdWx0LmRpZ2l0c1swXSA9ICgocmVzdWx0LmRpZ2l0c1tpXSA8PCBiaXRzKSAmIG1heERpZ2l0VmFsKTsKCXJlc3VsdC5pc05lZyA9IHguaXNOZWc7CglyZXR1cm4gcmVzdWx0Owp9Cgp2YXIgbG93Qml0TWFza3MgPSBuZXcgQXJyYXkoMHgwMDAwLCAweDAwMDEsIDB4MDAwMywgMHgwMDA3LCAweDAwMEYsIDB4MDAxRiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAzRiwgMHgwMDdGLCAweDAwRkYsIDB4MDFGRiwgMHgwM0ZGLCAweDA3RkYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDBGRkYsIDB4MUZGRiwgMHgzRkZGLCAweDdGRkYsIDB4RkZGRik7CgpmdW5jdGlvbiBiaVNoaWZ0UmlnaHQoeCwgbikKewoJdmFyIGRpZ2l0Q291bnQgPSBNYXRoLmZsb29yKG4gLyBiaXRzUGVyRGlnaXQpOwoJdmFyIHJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCWFycmF5Q29weSh4LmRpZ2l0cywgZGlnaXRDb3VudCwgcmVzdWx0LmRpZ2l0cywgMCwKCSAgICAgICAgICB4LmRpZ2l0cy5sZW5ndGggLSBkaWdpdENvdW50KTsKCXZhciBiaXRzID0gbiAlIGJpdHNQZXJEaWdpdDsKCXZhciBsZWZ0Qml0cyA9IGJpdHNQZXJEaWdpdCAtIGJpdHM7Cglmb3IgKHZhciBpID0gMCwgaTEgPSBpICsgMTsgaSA8IHJlc3VsdC5kaWdpdHMubGVuZ3RoIC0gMTsgKytpLCArK2kxKSB7CgkJcmVzdWx0LmRpZ2l0c1tpXSA9IChyZXN1bHQuZGlnaXRzW2ldID4+PiBiaXRzKSB8CgkJICAgICAgICAgICAgICAgICAgICgocmVzdWx0LmRpZ2l0c1tpMV0gJiBsb3dCaXRNYXNrc1tiaXRzXSkgPDwgbGVmdEJpdHMpOwoJfQoJcmVzdWx0LmRpZ2l0c1tyZXN1bHQuZGlnaXRzLmxlbmd0aCAtIDFdID4+Pj0gYml0czsKCXJlc3VsdC5pc05lZyA9IHguaXNOZWc7CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaU11bHRpcGx5QnlSYWRpeFBvd2VyKHgsIG4pCnsKCXZhciByZXN1bHQgPSBuZXcgQmlnSW50KCk7CglhcnJheUNvcHkoeC5kaWdpdHMsIDAsIHJlc3VsdC5kaWdpdHMsIG4sIHJlc3VsdC5kaWdpdHMubGVuZ3RoIC0gbik7CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaURpdmlkZUJ5UmFkaXhQb3dlcih4LCBuKQp7Cgl2YXIgcmVzdWx0ID0gbmV3IEJpZ0ludCgpOwoJYXJyYXlDb3B5KHguZGlnaXRzLCBuLCByZXN1bHQuZGlnaXRzLCAwLCByZXN1bHQuZGlnaXRzLmxlbmd0aCAtIG4pOwoJcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gYmlNb2R1bG9CeVJhZGl4UG93ZXIoeCwgbikKewoJdmFyIHJlc3VsdCA9IG5ldyBCaWdJbnQoKTsKCWFycmF5Q29weSh4LmRpZ2l0cywgMCwgcmVzdWx0LmRpZ2l0cywgMCwgbik7CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaUNvbXBhcmUoeCwgeSkKewoJaWYgKHguaXNOZWcgIT0geS5pc05lZykgewoJCXJldHVybiAxIC0gMiAqIE51bWJlcih4LmlzTmVnKTsKCX0KCWZvciAodmFyIGkgPSB4LmRpZ2l0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewoJCWlmICh4LmRpZ2l0c1tpXSAhPSB5LmRpZ2l0c1tpXSkgewoJCQlpZiAoeC5pc05lZykgewoJCQkJcmV0dXJuIDEgLSAyICogTnVtYmVyKHguZGlnaXRzW2ldID4geS5kaWdpdHNbaV0pOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIDEgLSAyICogTnVtYmVyKHguZGlnaXRzW2ldIDwgeS5kaWdpdHNbaV0pOwoJCQl9CgkJfQoJfQoJcmV0dXJuIDA7Cn0KCmZ1bmN0aW9uIGJpRGl2aWRlTW9kdWxvKHgsIHkpCnsKCXZhciBuYiA9IGJpTnVtQml0cyh4KTsKCXZhciB0YiA9IGJpTnVtQml0cyh5KTsKCXZhciBvcmlnWUlzTmVnID0geS5pc05lZzsKCXZhciBxLCByOwoJaWYgKG5iIDwgdGIpIHsKCQkvLyB8eHwgPCB8eXwKCQlpZiAoeC5pc05lZykgewoJCQlxID0gYmlDb3B5KGJpZ09uZSk7CgkJCXEuaXNOZWcgPSAheS5pc05lZzsKCQkJeC5pc05lZyA9IGZhbHNlOwoJCQl5LmlzTmVnID0gZmFsc2U7CgkJCXIgPSBiaVN1YnRyYWN0KHksIHgpOwoJCQkvLyBSZXN0b3JlIHNpZ25zLCAnY2F1c2UgdGhleSdyZSByZWZlcmVuY2VzLgoJCQl4LmlzTmVnID0gdHJ1ZTsKCQkJeS5pc05lZyA9IG9yaWdZSXNOZWc7CgkJfSBlbHNlIHsKCQkJcSA9IG5ldyBCaWdJbnQoKTsKCQkJciA9IGJpQ29weSh4KTsKCQl9CgkJcmV0dXJuIG5ldyBBcnJheShxLCByKTsKCX0KCglxID0gbmV3IEJpZ0ludCgpOwoJciA9IHg7CgoJLy8gTm9ybWFsaXplIFkuCgl2YXIgdCA9IE1hdGguY2VpbCh0YiAvIGJpdHNQZXJEaWdpdCkgLSAxOwoJdmFyIGxhbWJkYSA9IDA7Cgl3aGlsZSAoeS5kaWdpdHNbdF0gPCBiaUhhbGZSYWRpeCkgewoJCXkgPSBiaVNoaWZ0TGVmdCh5LCAxKTsKCQkrK2xhbWJkYTsKCQkrK3RiOwoJCXQgPSBNYXRoLmNlaWwodGIgLyBiaXRzUGVyRGlnaXQpIC0gMTsKCX0KCS8vIFNoaWZ0IHIgb3ZlciB0byBrZWVwIHRoZSBxdW90aWVudCBjb25zdGFudC4gV2UnbGwgc2hpZnQgdGhlCgkvLyByZW1haW5kZXIgYmFjayBhdCB0aGUgZW5kLgoJciA9IGJpU2hpZnRMZWZ0KHIsIGxhbWJkYSk7CgluYiArPSBsYW1iZGE7IC8vIFVwZGF0ZSB0aGUgYml0IGNvdW50IGZvciB4LgoJdmFyIG4gPSBNYXRoLmNlaWwobmIgLyBiaXRzUGVyRGlnaXQpIC0gMTsKCgl2YXIgYiA9IGJpTXVsdGlwbHlCeVJhZGl4UG93ZXIoeSwgbiAtIHQpOwoJd2hpbGUgKGJpQ29tcGFyZShyLCBiKSAhPSAtMSkgewoJCSsrcS5kaWdpdHNbbiAtIHRdOwoJCXIgPSBiaVN1YnRyYWN0KHIsIGIpOwoJfQoJZm9yICh2YXIgaSA9IG47IGkgPiB0OyAtLWkpIHsKICAgIHZhciByaSA9IChpID49IHIuZGlnaXRzLmxlbmd0aCkgPyAwIDogci5kaWdpdHNbaV07CiAgICB2YXIgcmkxID0gKGkgLSAxID49IHIuZGlnaXRzLmxlbmd0aCkgPyAwIDogci5kaWdpdHNbaSAtIDFdOwogICAgdmFyIHJpMiA9IChpIC0gMiA+PSByLmRpZ2l0cy5sZW5ndGgpID8gMCA6IHIuZGlnaXRzW2kgLSAyXTsKICAgIHZhciB5dCA9ICh0ID49IHkuZGlnaXRzLmxlbmd0aCkgPyAwIDogeS5kaWdpdHNbdF07CiAgICB2YXIgeXQxID0gKHQgLSAxID49IHkuZGlnaXRzLmxlbmd0aCkgPyAwIDogeS5kaWdpdHNbdCAtIDFdOwoJCWlmIChyaSA9PSB5dCkgewoJCQlxLmRpZ2l0c1tpIC0gdCAtIDFdID0gbWF4RGlnaXRWYWw7CgkJfSBlbHNlIHsKCQkJcS5kaWdpdHNbaSAtIHQgLSAxXSA9IE1hdGguZmxvb3IoKHJpICogYmlSYWRpeCArIHJpMSkgLyB5dCk7CgkJfQoKCQl2YXIgYzEgPSBxLmRpZ2l0c1tpIC0gdCAtIDFdICogKCh5dCAqIGJpUmFkaXgpICsgeXQxKTsKCQl2YXIgYzIgPSAocmkgKiBiaVJhZGl4U3F1YXJlZCkgKyAoKHJpMSAqIGJpUmFkaXgpICsgcmkyKTsKCQl3aGlsZSAoYzEgPiBjMikgewoJCQktLXEuZGlnaXRzW2kgLSB0IC0gMV07CgkJCWMxID0gcS5kaWdpdHNbaSAtIHQgLSAxXSAqICgoeXQgKiBiaVJhZGl4KSB8IHl0MSk7CgkJCWMyID0gKHJpICogYmlSYWRpeCAqIGJpUmFkaXgpICsgKChyaTEgKiBiaVJhZGl4KSArIHJpMik7CgkJfQoKCQliID0gYmlNdWx0aXBseUJ5UmFkaXhQb3dlcih5LCBpIC0gdCAtIDEpOwoJCXIgPSBiaVN1YnRyYWN0KHIsIGJpTXVsdGlwbHlEaWdpdChiLCBxLmRpZ2l0c1tpIC0gdCAtIDFdKSk7CgkJaWYgKHIuaXNOZWcpIHsKCQkJciA9IGJpQWRkKHIsIGIpOwoJCQktLXEuZGlnaXRzW2kgLSB0IC0gMV07CgkJfQoJfQoJciA9IGJpU2hpZnRSaWdodChyLCBsYW1iZGEpOwoJLy8gRmlkZGxlIHdpdGggdGhlIHNpZ25zIGFuZCBzdHVmZiB0byBtYWtlIHN1cmUgdGhhdCAwIDw9IHIgPCB5LgoJcS5pc05lZyA9IHguaXNOZWcgIT0gb3JpZ1lJc05lZzsKCWlmICh4LmlzTmVnKSB7CgkJaWYgKG9yaWdZSXNOZWcpIHsKCQkJcSA9IGJpQWRkKHEsIGJpZ09uZSk7CgkJfSBlbHNlIHsKCQkJcSA9IGJpU3VidHJhY3QocSwgYmlnT25lKTsKCQl9CgkJeSA9IGJpU2hpZnRSaWdodCh5LCBsYW1iZGEpOwoJCXIgPSBiaVN1YnRyYWN0KHksIHIpOwoJfQoJLy8gQ2hlY2sgZm9yIHRoZSB1bmJlbGlldmFibHkgc3R1cGlkIGRlZ2VuZXJhdGUgY2FzZSBvZiByID09IC0wLgoJaWYgKHIuZGlnaXRzWzBdID09IDAgJiYgYmlIaWdoSW5kZXgocikgPT0gMCkgci5pc05lZyA9IGZhbHNlOwoKCXJldHVybiBuZXcgQXJyYXkocSwgcik7Cn0KCmZ1bmN0aW9uIGJpRGl2aWRlKHgsIHkpCnsKCXJldHVybiBiaURpdmlkZU1vZHVsbyh4LCB5KVswXTsKfQoKZnVuY3Rpb24gYmlNb2R1bG8oeCwgeSkKewoJcmV0dXJuIGJpRGl2aWRlTW9kdWxvKHgsIHkpWzFdOwp9CgpmdW5jdGlvbiBiaU11bHRpcGx5TW9kKHgsIHksIG0pCnsKCXJldHVybiBiaU1vZHVsbyhiaU11bHRpcGx5KHgsIHkpLCBtKTsKfQoKZnVuY3Rpb24gYmlQb3coeCwgeSkKewoJdmFyIHJlc3VsdCA9IGJpZ09uZTsKCXZhciBhID0geDsKCXdoaWxlICh0cnVlKSB7CgkJaWYgKCh5ICYgMSkgIT0gMCkgcmVzdWx0ID0gYmlNdWx0aXBseShyZXN1bHQsIGEpOwoJCXkgPj49IDE7CgkJaWYgKHkgPT0gMCkgYnJlYWs7CgkJYSA9IGJpTXVsdGlwbHkoYSwgYSk7Cgl9CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBiaVBvd01vZCh4LCB5LCBtKQp7Cgl2YXIgcmVzdWx0ID0gYmlnT25lOwoJdmFyIGEgPSB4OwoJdmFyIGsgPSB5OwoJd2hpbGUgKHRydWUpIHsKCQlpZiAoKGsuZGlnaXRzWzBdICYgMSkgIT0gMCkgcmVzdWx0ID0gYmlNdWx0aXBseU1vZChyZXN1bHQsIGEsIG0pOwoJCWsgPSBiaVNoaWZ0UmlnaHQoaywgMSk7CgkJaWYgKGsuZGlnaXRzWzBdID09IDAgJiYgYmlIaWdoSW5kZXgoaykgPT0gMCkgYnJlYWs7CgkJYSA9IGJpTXVsdGlwbHlNb2QoYSwgYSwgbSk7Cgl9CglyZXR1cm4gcmVzdWx0Owp9CgovLyBCYXJyZXR0TXUsIGEgY2xhc3MgZm9yIHBlcmZvcm1pbmcgQmFycmV0dCBtb2R1bGFyIHJlZHVjdGlvbiBjb21wdXRhdGlvbnMgaW4KLy8gSmF2YVNjcmlwdC4KLy8KLy8gUmVxdWlyZXMgQmlnSW50LmpzLgovLwovLyBDb3B5cmlnaHQgMjAwNC0yMDA1IERhdmlkIFNoYXBpcm8uCi8vCi8vIFlvdSBtYXkgdXNlLCByZS11c2UsIGFidXNlLCBjb3B5LCBhbmQgbW9kaWZ5IHRoaXMgY29kZSB0byB5b3VyIGxpa2luZywgYnV0Ci8vIHBsZWFzZSBrZWVwIHRoaXMgaGVhZGVyLgovLwovLyBUaGFua3MhCi8vIAovLyBEYXZlIFNoYXBpcm8KLy8gZGF2ZUBvaGRhdmUuY29tIAoKZnVuY3Rpb24gQmFycmV0dE11KG0pCnsKCXRoaXMubW9kdWx1cyA9IGJpQ29weShtKTsKCXRoaXMuayA9IGJpSGlnaEluZGV4KHRoaXMubW9kdWx1cykgKyAxOwoJdmFyIGIyayA9IG5ldyBCaWdJbnQoKTsKCWIyay5kaWdpdHNbMiAqIHRoaXMua10gPSAxOyAvLyBiMmsgPSBiXigyaykKCXRoaXMubXUgPSBiaURpdmlkZShiMmssIHRoaXMubW9kdWx1cyk7Cgl0aGlzLmJrcGx1czEgPSBuZXcgQmlnSW50KCk7Cgl0aGlzLmJrcGx1czEuZGlnaXRzW3RoaXMuayArIDFdID0gMTsgLy8gYmtwbHVzMSA9IGJeKGsrMSkKCXRoaXMubW9kdWxvID0gQmFycmV0dE11X21vZHVsbzsKCXRoaXMubXVsdGlwbHlNb2QgPSBCYXJyZXR0TXVfbXVsdGlwbHlNb2Q7Cgl0aGlzLnBvd01vZCA9IEJhcnJldHRNdV9wb3dNb2Q7Cn0KCmZ1bmN0aW9uIEJhcnJldHRNdV9tb2R1bG8oeCkKewoJdmFyIHExID0gYmlEaXZpZGVCeVJhZGl4UG93ZXIoeCwgdGhpcy5rIC0gMSk7Cgl2YXIgcTIgPSBiaU11bHRpcGx5KHExLCB0aGlzLm11KTsKCXZhciBxMyA9IGJpRGl2aWRlQnlSYWRpeFBvd2VyKHEyLCB0aGlzLmsgKyAxKTsKCXZhciByMSA9IGJpTW9kdWxvQnlSYWRpeFBvd2VyKHgsIHRoaXMuayArIDEpOwoJdmFyIHIydGVybSA9IGJpTXVsdGlwbHkocTMsIHRoaXMubW9kdWx1cyk7Cgl2YXIgcjIgPSBiaU1vZHVsb0J5UmFkaXhQb3dlcihyMnRlcm0sIHRoaXMuayArIDEpOwoJdmFyIHIgPSBiaVN1YnRyYWN0KHIxLCByMik7CglpZiAoci5pc05lZykgewoJCXIgPSBiaUFkZChyLCB0aGlzLmJrcGx1czEpOwoJfQoJdmFyIHJndGVtID0gYmlDb21wYXJlKHIsIHRoaXMubW9kdWx1cykgPj0gMDsKCXdoaWxlIChyZ3RlbSkgewoJCXIgPSBiaVN1YnRyYWN0KHIsIHRoaXMubW9kdWx1cyk7CgkJcmd0ZW0gPSBiaUNvbXBhcmUociwgdGhpcy5tb2R1bHVzKSA+PSAwOwoJfQoJcmV0dXJuIHI7Cn0KCmZ1bmN0aW9uIEJhcnJldHRNdV9tdWx0aXBseU1vZCh4LCB5KQp7CgkvKgoJeCA9IHRoaXMubW9kdWxvKHgpOwoJeSA9IHRoaXMubW9kdWxvKHkpOwoJKi8KCXZhciB4eSA9IGJpTXVsdGlwbHkoeCwgeSk7CglyZXR1cm4gdGhpcy5tb2R1bG8oeHkpOwp9CgpmdW5jdGlvbiBCYXJyZXR0TXVfcG93TW9kKHgsIHkpCnsKCXZhciByZXN1bHQgPSBuZXcgQmlnSW50KCk7CglyZXN1bHQuZGlnaXRzWzBdID0gMTsKCXZhciBhID0geDsKCXZhciBrID0geTsKCXdoaWxlICh0cnVlKSB7CgkJaWYgKChrLmRpZ2l0c1swXSAmIDEpICE9IDApIHJlc3VsdCA9IHRoaXMubXVsdGlwbHlNb2QocmVzdWx0LCBhKTsKCQlrID0gYmlTaGlmdFJpZ2h0KGssIDEpOwoJCWlmIChrLmRpZ2l0c1swXSA9PSAwICYmIGJpSGlnaEluZGV4KGspID09IDApIGJyZWFrOwoJCWEgPSB0aGlzLm11bHRpcGx5TW9kKGEsIGEpOwoJfQoJcmV0dXJuIHJlc3VsdDsKfQoKCi8vIFJTQSwgYSBzdWl0ZSBvZiByb3V0aW5lcyBmb3IgcGVyZm9ybWluZyBSU0EgcHVibGljLWtleSBjb21wdXRhdGlvbnMgaW4KLy8gSmF2YVNjcmlwdC4KLy8KLy8gUmVxdWlyZXMgQmlnSW50LmpzIGFuZCBCYXJyZXR0LmpzLgovLwovLyBDb3B5cmlnaHQgMTk5OC0yMDA1IERhdmlkIFNoYXBpcm8uCi8vCi8vIFlvdSBtYXkgdXNlLCByZS11c2UsIGFidXNlLCBjb3B5LCBhbmQgbW9kaWZ5IHRoaXMgY29kZSB0byB5b3VyIGxpa2luZywgYnV0Ci8vIHBsZWFzZSBrZWVwIHRoaXMgaGVhZGVyLgovLwovLyBUaGFua3MhCi8vIAovLyBEYXZlIFNoYXBpcm8KLy8gZGF2ZUBvaGRhdmUuY29tIAoKZnVuY3Rpb24gUlNBS2V5UGFpcihlbmNyeXB0aW9uRXhwb25lbnQsIGRlY3J5cHRpb25FeHBvbmVudCwgbW9kdWx1cykKewoJdGhpcy5lID0gYmlGcm9tSGV4KGVuY3J5cHRpb25FeHBvbmVudCk7Cgl0aGlzLmQgPSBiaUZyb21IZXgoZGVjcnlwdGlvbkV4cG9uZW50KTsKCXRoaXMubSA9IGJpRnJvbUhleChtb2R1bHVzKTsKCS8vIFdlIGNhbiBkbyB0d28gYnl0ZXMgcGVyIGRpZ2l0LCBzbwoJLy8gY2h1bmtTaXplID0gMiAqIChudW1iZXIgb2YgZGlnaXRzIGluIG1vZHVsdXMgLSAxKS4KCS8vIFNpbmNlIGJpSGlnaEluZGV4IHJldHVybnMgdGhlIGhpZ2ggaW5kZXgsIG5vdCB0aGUgbnVtYmVyIG9mIGRpZ2l0cywgMSBoYXMKCS8vIGFscmVhZHkgYmVlbiBzdWJ0cmFjdGVkLgoJdGhpcy5jaHVua1NpemUgPSAyICogYmlIaWdoSW5kZXgodGhpcy5tKTsKCXRoaXMucmFkaXggPSAxNjsKCXRoaXMuYmFycmV0dCA9IG5ldyBCYXJyZXR0TXUodGhpcy5tKTsKfQoKZnVuY3Rpb24gdHdvRGlnaXQobikKewoJcmV0dXJuIChuIDwgMTAgPyAiMCIgOiAiIikgKyBTdHJpbmcobik7Cn0KCmZ1bmN0aW9uIGJvZHlSU0EoKSAgIAp7ICAgCgkgICAgc2V0TWF4RGlnaXRzKDEzMCk7ICAgCgkgICAgcmV0dXJuIG5ldyBSU0FLZXlQYWlyKCIxMDAwMSIsIiIsImE1YWViOGM2MzZlZjFmZGE1YTdhMTdhMjgxOWU1MWUxZWE2ZTBjY2ViMjRiOTU1NzRhZTAyNjUzNjI0MzUyNGYzMjI4MDdkZjI1MzFhNDIxMzkzODk2NzQ1NDVmNGM1OTZkYjE2MmY2ZTZiYmIyNjQ5OGJhYWIwNzRjMDM2Nzc3Iik7CgkgICAgLy9yZXR1cm4gbmV3IFJTQUtleVBhaXIoIjEwMDAxIiwiIiwiZmRzc2Zkc2Zkc2Zkc2ZkcyIpOyAgICAKfQoKZnVuY3Rpb24gZW5jcnlwdGVkU3RyaW5nKG1vZHVsdXMscykKCS8vIEFsdGVyZWQgYnkgUm9iIFNhdW5kZXJzIChyb2JAcm9ic2F1bmRlcnMubmV0KS4gTmV3IHJvdXRpbmUgcGFkcyB0aGUKCS8vIHN0cmluZyBhZnRlciBpdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYW4gYXJyYXkuIFRoaXMgZml4ZXMgYW4KCS8vIGluY29tcGF0aWJpbGl0eSB3aXRoIEZsYXNoIE1YJ3MgQWN0aW9uU2NyaXB0Lgp7CiAgICB2YXIga2V5ID0gIG5ldyBSU0FLZXlQYWlyKCIwMTAwMDEiLCIiLG1vZHVsdXMpOyAKCgl2YXIgYSA9IG5ldyBBcnJheSgpOwoJdmFyIHNsID0gcy5sZW5ndGg7Cgl2YXIgaSA9IDA7Cgl3aGlsZSAoaSA8IHNsKSB7CgkJYVtpXSA9IHMuY2hhckNvZGVBdChpKTsKCQlpKys7Cgl9CgoJd2hpbGUgKGEubGVuZ3RoICUga2V5LmNodW5rU2l6ZSAhPSAwKSB7CgkJYVtpKytdID0gMDsKCX0KCgl2YXIgYWwgPSBhLmxlbmd0aDsKCXZhciByZXN1bHQgPSAiIjsKCXZhciBqLCBrLCBibG9jazsKCWZvciAoaSA9IDA7IGkgPCBhbDsgaSArPSBrZXkuY2h1bmtTaXplKSB7CgkJYmxvY2sgPSBuZXcgQmlnSW50KCk7CgkJaiA9IDA7CgkJZm9yIChrID0gaTsgayA8IGkgKyBrZXkuY2h1bmtTaXplOyArK2opIHsKCQkJYmxvY2suZGlnaXRzW2pdID0gYVtrKytdOwoJCQlibG9jay5kaWdpdHNbal0gKz0gYVtrKytdIDw8IDg7CgkJfQoJCXZhciBjcnlwdCA9IGtleS5iYXJyZXR0LnBvd01vZChibG9jaywga2V5LmUpOwoJCXZhciB0ZXh0ID0ga2V5LnJhZGl4ID09IDE2ID8gYmlUb0hleChjcnlwdCkgOiBiaVRvU3RyaW5nKGNyeXB0LCBrZXkucmFkaXgpOwoJCXJlc3VsdCArPSB0ZXh0ICsgIiAiOwoJfQoJcmV0dXJuIHJlc3VsdC5zdWJzdHJpbmcoMCwgcmVzdWx0Lmxlbmd0aCAtIDEpOyAvLyBSZW1vdmUgbGFzdCBzcGFjZS4KfQoKZnVuY3Rpb24gZGVjcnlwdGVkU3RyaW5nKHMpCnsKCWZ1bmN0aW9uIGJvZHlSU0EoKSAgIAoJeyAgIAoJICAgIHNldE1heERpZ2l0cygxMzApOyAgIAoJICAgIHJldHVybiBuZXcgUlNBS2V5UGFpcigiMTAwMDEiLCIiLCJhNWFlYjhjNjM2ZWYxZmRhNWE3YTE3YTI4MTllNTFlMWVhNmUwY2NlYjI0Yjk1NTc0YWUwMjY1MzYyNDM1MjRmMzIyODA3ZGYyNTMxYTQyMTM5Mzg5Njc0NTQ1ZjRjNTk2ZGIxNjJmNmU2YmJiMjY0OThiYWFiMDc0YzAzNjc3NyIpOyAgICAKCX0KCXZhciBrZXkgPSAgYm9keVJTQSgpOyAKCXZhciBibG9ja3MgPSBzLnNwbGl0KCIgIik7Cgl2YXIgcmVzdWx0ID0gIiI7Cgl2YXIgaSwgaiwgYmxvY2s7Cglmb3IgKGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgKytpKSB7CgkJdmFyIGJpOwoJCWlmIChrZXkucmFkaXggPT0gMTYpIHsKCQkJYmkgPSBiaUZyb21IZXgoYmxvY2tzW2ldKTsKCQl9CgkJZWxzZSB7CgkJCWJpID0gYmlGcm9tU3RyaW5nKGJsb2Nrc1tpXSwga2V5LnJhZGl4KTsKCQl9CgkJYmxvY2sgPSBrZXkuYmFycmV0dC5wb3dNb2QoYmksIGtleS5kKTsKCQlmb3IgKGogPSAwOyBqIDw9IGJpSGlnaEluZGV4KGJsb2NrKTsgKytqKSB7CgkJCXJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJsb2NrLmRpZ2l0c1tqXSAmIDI1NSwKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suZGlnaXRzW2pdID4+IDgpOwoJCX0KCX0KCS8vIFJlbW92ZSB0cmFpbGluZyBudWxsLCBpZiBhbnkuCglpZiAocmVzdWx0LmNoYXJDb2RlQXQocmVzdWx0Lmxlbmd0aCAtIDEpID09IDApIHsKCQlyZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKDAsIHJlc3VsdC5sZW5ndGggLSAxKTsKCX0KCXJldHVybiByZXN1bHQ7Cn0=";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/service/account/seeInfo.jsp";
            response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_001").setFullUrl(templateUrl).invoke();
            String pageContent = response.getPageContent();
            String modulus = PatternUtils.group(pageContent, "var modulus = \"([^\"]+)\"", 1);
            if (StringUtils.isNotBlank(modulus)) {
                TaskUtils.addTaskShare(param.getTaskId(), "modulus", modulus);
                return result.success();
            } else {
                logger.error("get encrypt param:modulus error!");
                return result.failure(ErrorCode.TASK_INIT_ERROR);
            }
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={}", param, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshPicCodeForLogin(param);
            default:
                return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return validatePicCodeForLogin(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshSmsCodeForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return new HttpResult<Object>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    private HttpResult<String> refeshPicCodeForLogin(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/public/v4/common/control/page/image.jsp?date=" + URLEncoder.encode("" + new Date(), "UTF-8");
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_002").setFullUrl(templateUrl).setReferer(referer).invoke();
            logger.info("登录-->图片验证码-->刷新成功,param={}", param);
            return result.success(response.getPageContentForBase64());
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> validatePicCodeForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String scriptSessionId = TaskUtils.getTaskShare(param.getTaskId(), "scriptSessionId");
            if (StringUtils.isBlank(scriptSessionId)) {
                logger.info("scriptSessionId is null");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            //用户类型
            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" +
                    "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" +
                    "&c0-param0=string:GET_USER_TYPE" + "&c0-param1=boolean:false" + "&c0-e1=string:" + param.getMobile() +
                    "&c0-param2=Object_Object:{user_no:reference:c0-e1}" + "&batchId=0";
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_005").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(templateData, ContentType.TEXT_PLAIN).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.containsNone(pageContent, "flag:\"0\"")) {
                logger.error("jx189 login request is error! errormessage: get user type failed");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }

            String areaCode = PatternUtils.group(pageContent, "s\\d+\\['area_code'\\]=\"(\\d+)\"", 1);
            if (StringUtils.isBlank(areaCode)) {
                logger.error("jx189 login request is error! errormessage: get area code failed");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            TaskUtils.addTaskShare(param.getTaskId(), "areaCode", areaCode);

            //验证图片验证码
            templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" +
                    "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" +
                    "&c0-param0=string:WB_TEST_VALIDCODE" + "&c0-param1=boolean:false" + "&c0-e1=string:" + param.getPicCode() +
                    "&c0-param2=Object_Object:{valid_code_input:reference:c0-e1}" + "&batchId=3";
            referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_006").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(templateData, ContentType.TEXT_PLAIN).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isNotBlank(pageContent) && StringUtils.contains(pageContent, "\"OK\"")) {
                logger.info("登录-->图片验证码-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("登录-->图片验证码-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_PIC_CODE_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForLogin(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/public/common/control/dwr/engine.js";
            response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_003").setFullUrl(templateUrl).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("获取scriptSessionId页面失败");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            String sessionId = PatternUtils.group(pageContent, "dwr.engine._origScriptSessionId = \"([^\"]+)\";", 1);
            if (StringUtils.isBlank(sessionId)) {
                logger.error("获取scriptSessionId失败");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            String scriptSessionId = sessionId + randomNum;
            TaskUtils.addTaskShare(param.getTaskId(), "scriptSessionId", scriptSessionId);

            templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" +
                    "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" +
                    "&c0-param0=string:SEND_LOGIN_RANDOM_PWD" + "&c0-param1=boolean:false" + "&c0-e1=string:" + param.getMobile() +
                    "&c0-e2=string:CR0" + "&c0-e3=string:001" + "&c0-e4=string:no" +
                    "&c0-param2=Object_Object:{RECV_NUM:reference:c0-e1, SMS_OPERTYPE:reference:c0-e2, RAND_TYPE:reference:c0-e3, need_val:reference:c0-e4}" +
                    "&batchId=2";
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";

            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_004").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(templateData, ContentType.TEXT_PLAIN).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "flag:\"0\"")) {
                logger.info("登录-->短信验证码-->发送成功,param={}", param);
                return result.success();
            } else {
                logger.error("登录-->短信验证码-->发送失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登录-->短信验证码-->发送失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPassword(), ErrorCode.EMPTY_PASSWORD);
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        CheckUtils.checkNotBlank(param.getSmsCode(), ErrorCode.EMPTY_SMS_CODE);
        HttpResult<Map<String, Object>> result = validatePicCodeForLogin(param);
        if (!result.getStatus()) {
            return result;
        }
        Response response = null;
        try {
            String scriptSessionId = TaskUtils.getTaskShare(param.getTaskId(),"scriptSessionId");
            String areaCode = TaskUtils.getTaskShare(param.getTaskId(), "areaCode");
            String modulus = TaskUtils.getTaskShare(param.getTaskId(), "modulus");
            logger.info("从share获取数据,areaCode=" + areaCode + ",modulus=" + modulus);
            //登录
            logger.info("加载加密js文件");
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript2);
            logger.info("开始加密《《《《《");
            String encryptSmsCode = invocable.invokeFunction("encryptedString", new Object[]{modulus, param.getSmsCode()}).toString();
            String encryptMobile = invocable.invokeFunction("encryptedString", new Object[]{modulus, param.getMobile().toString()}).toString();
            logger.info("加密完成《《《《《  encryptSmsCode=" + encryptSmsCode + "，encryptMobile=" + encryptMobile);

            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" +
                    "&httpSessionId=&scriptSessionId=" + scriptSessionId +
                    "&c0-scriptName=Service&c0-methodName=excute&c0-id=0&c0-param0=string:MWB_WT_USERLOGIN&c0-param1=boolean:false" +
                    "&c0-e1=string:22&c0-e2=string:80000045&c0-e3=string:" + encryptSmsCode + "&c0-e4=string:" + encryptMobile + "&c0-e5=string:" +
                    areaCode +
                    "&c0-e6=string:1&c0-param2=Object_Object:{LOGIN_TYPE:reference:c0-e1, LOGIN_PRODUCT_ID:reference:c0-e2, LOGIN_PASSWD:reference:c0-e3, LOGIN_NAME:reference:c0-e4, AREA_CODE:reference:c0-e5, MY_CHECK_FLAG:reference:c0-e6}&batchId=5";
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_007").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(templateData, ContentType.TEXT_PLAIN).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, param.getMobile().toString()) && StringUtils.contains(pageContent, "IS_SUCCESS':\"1")) {
                templateUrl = "http://login.189.cn/";
                referer = "http://www.189.cn/html/login/index.html";
                response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_008").setFullUrl(templateUrl).setReferer(referer)
                        .invoke();
                if (StringUtils.isBlank(response.getPageContent())) {
                    logger.error("jx189 login request is error! errormessage: pre login failed");
                    return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
                }

                invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript1);
                String encryptPassWord = invocable.invokeFunction("aesEncrypt", param.getPassword()).toString();
                templateUrl = "http://login.189.cn/login";
                templateData = "Account=" + param.getMobile() + "&UType=201&ProvinceID=15&AreaCode=&CityNo=&RandomFlag=0&Password=" +
                        URLEncoder.encode(encryptPassWord, "UTF-8") + "&Captcha=";
                referer = "http://login.189.cn/login";
                response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_009").setFullUrl(templateUrl).setReferer(referer)
                        .setRequestBody(templateData).invoke();
                if (StringUtils.isBlank(response.getPageContent())) {
                    logger.error("jx189 login request loginre.189.cn error");
                    return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
                }

                templateUrl = "http://www.189.cn/login/index.do";
                referer = "http://www.189.cn/html/login/index.html";
                response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_010").setFullUrl(templateUrl).setReferer(referer)
                        .invoke();
                pageContent = response.getPageContent();
                if (StringUtils.containsNone(pageContent, "code\":\"0")) {
                    logger.error("jx189 login check password failed");
                    return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
                }
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},pageContent={}", param, pageContent);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String scriptSessionId = TaskUtils.getTaskShare(param.getTaskId(),"scriptSessionId");
            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1&page=/2017/details.jsp&httpSessionId=&scriptSessionId=" + scriptSessionId +
                    "&c0-scriptName=Service&c0-methodName=excute&c0-id=0&c0-param0=string:DETAILS_SERVICE&" + "c0-param1=boolean:false&c0-e1=string:SEND_SMS_CODE&c0-param2=Object_Object:{method:reference:c0-e1}&batchId=1";
            String referer = "http://jx.189.cn/2017/details.jsp";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_011").setFullUrl(templateUrl).setRequestBody(templateData, ContentType.TEXT_PLAIN)
                    .setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "CODE:\"1\"")) {
                logger.info("详单-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String scriptSessionId = TaskUtils.getTaskShare(param.getTaskId(),"scriptSessionId");
            SimpleDateFormat format = new SimpleDateFormat("yyyyMM");
            String queryMonth = format.format(new Date());
            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1&page=/2017/details.jsp&httpSessionId=&scriptSessionId=" + scriptSessionId +
                    "&c0-scriptName=Service&c0-methodName=excute&c0-id=0&c0-param0=string:DETAILS_SERVICE&c0-param1=boolean:false&c0-e1=string:" +
                    queryMonth +
                    "&c0-e2=string:7&c0-e3=string:"+param.getSmsCode()+"&c0-e4=string:QRY_DETAILS_BY_LOGIN_NBR&c0-param2=Object_Object:{month:reference:c0-e1, query_type:reference:c0-e2, valid_code:reference:c0-e3, method:reference:c0-e4}&batchId=2";
            String referer = "http://jx.189.cn/2017/details.jsp";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_012").setFullUrl(templateUrl)
                    .setRequestBody(templateData, ContentType.TEXT_PLAIN).setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            TaskUtils.addTaskShare(param.getTaskId(), "scriptSessionId", scriptSessionId);
            if (StringUtils.contains(pageContent, "CODE:\"0\"")) {
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_UNEXPECTED_RESULT);
            }

        } catch (Exception e) {
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }
    }

    private String getRandomNumber() {
        int number = 0;
        while (true) {
            number = (int) (Math.random() * 1000);
            if (number >= 100 && number < 1000) {
                break;
            }
        }
        return String.valueOf(number);

    }
}