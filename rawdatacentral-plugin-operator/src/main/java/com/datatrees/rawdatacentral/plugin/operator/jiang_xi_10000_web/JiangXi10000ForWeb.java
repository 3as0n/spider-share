package com.datatrees.rawdatacentral.plugin.operator.jiang_xi_10000_web;

import javax.script.Invocable;
import java.net.URLEncoder;
import java.util.Date;
import java.util.Map;

import com.datatrees.common.util.PatternUtils;
import com.datatrees.crawler.core.processor.common.ProcessorContextUtil;
import com.datatrees.crawler.core.processor.plugin.PluginConstants;
import com.datatrees.crawler.core.processor.plugin.PluginFactory;
import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.rawdatacentral.domain.constant.FormType;
import com.datatrees.rawdatacentral.domain.enums.ErrorCode;
import com.datatrees.rawdatacentral.domain.enums.RequestType;
import com.datatrees.rawdatacentral.domain.operator.OperatorParam;
import com.datatrees.rawdatacentral.domain.result.HttpResult;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.rawdatacentral.service.OperatorPluginService;
import com.ibm.icu.text.SimpleDateFormat;
import org.apache.commons.lang.StringUtils;
import org.apache.http.entity.ContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 江西电信web端
 * 登录 手机号，服务密码，短信验证码，图片验证码
 * 详单查询 短信验证码
 * User: yand
 * Date: 2017/9/28
 */
public class JiangXi10000ForWeb implements OperatorPluginService {

    private static       Logger logger          = LoggerFactory.getLogger(JiangXi10000ForWeb.class);
    private              String randomNum       = getRandomNumber();
    private              String scriptSessionId = StringUtils.EMPTY;
    private              String modulus         = StringUtils.EMPTY;
    private static final String javaScript1     = "";
    private static final String javaScript2     = "";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/service/account/seeInfo.jsp";
            response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_001").setFullUrl(templateUrl).invoke();
            String pageContent = response.getPageContent();
            modulus = PatternUtils.group(pageContent, "var modulus = \"([^\"]+)\"", 1);
            if (StringUtils.isNotBlank(modulus)) {
                return result.success();
            } else {
                logger.error("get encrypt param:modulus error!");
                return result.failure(ErrorCode.TASK_INIT_ERROR);
            }
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={}", param, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshPicCodeForLogin(param);
            default:
                return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshSmsCodeForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return new HttpResult<Object>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    private HttpResult<String> refeshPicCodeForLogin(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/public/v4/common/control/page/image.jsp?date=" + URLEncoder.encode("" + new Date(), "UTF-8");
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_002").setFullUrl(templateUrl).setReferer(referer).invoke();
            logger.info("登录-->图片验证码-->刷新成功,param={}", param);
            return result.success(response.getPageContentForBase64());
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForLogin(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/public/common/control/dwr/engine.js";
            response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_003").setFullUrl(templateUrl).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("获取scriptSessionId页面失败");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            String sessionId = PatternUtils.group(pageContent, "dwr.engine._origScriptSessionId = \"([^\"]+)\";", 1);
            if (StringUtils.isBlank(sessionId)) {
                logger.error("获取scriptSessionId失败");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            scriptSessionId = sessionId + randomNum;
            logger.info(scriptSessionId);
            TaskUtils.addTaskShare(param.getTaskId(), "scriptSessionId", scriptSessionId);

            templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" + "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" + "&c0-param0=string:SEND_LOGIN_RANDOM_PWD" + "&c0-param1=boolean:false" + "&c0-e1=string:" + param.getMobile() + "&c0-e2=string:CR0" + "&c0-e3=string:001" + "&c0-e4=string:no" + "&c0-param2=Object_Object:{RECV_NUM:reference:c0-e1, SMS_OPERTYPE:reference:c0-e2, RAND_TYPE:reference:c0-e3, need_val:reference:c0-e4}" + "&batchId=2";
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";

            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_004").setFullUrl(templateUrl).setReferer(referer).setRequestBody(templateData, ContentType.TEXT_PLAIN).invoke();
            pageContent = response.getPageContent();
            String cookieRandom = TaskUtils.getCookieString(param.getTaskId());
            TaskUtils.addTaskShare(param.getTaskId(), "cookieRandom", cookieRandom);
            if (StringUtils.contains(pageContent, "flag:\"0\"")) {
                logger.info("登录-->短信验证码-->发送成功,param={}", param);
                return result.success();
            } else {
                logger.error("登录-->短信验证码-->发送失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登录-->短信验证码-->发送失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPassword(), ErrorCode.EMPTY_PASSWORD);
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        CheckUtils.checkNotBlank(param.getSmsCode(), ErrorCode.EMPTY_SMS_CODE);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;

        try {
            scriptSessionId = TaskUtils.getTaskShare(param.getTaskId(), "scriptSessionId");
            if (StringUtils.isBlank(scriptSessionId)) {
                logger.info("scriptSessionId is null");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            //用户类型
            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" + "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" + "&c0-param0=string:GET_USER_TYPE" + "&c0-param1=boolean:false" + "&c0-e1=string:" + param.getMobile() + "&c0-param2=Object_Object:{user_no:reference:c0-e1}" + "&batchId=0";
            String referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_005").setFullUrl(templateUrl).setReferer(referer).setRequestBody(templateData,ContentType.TEXT_PLAIN).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.containsNone(pageContent, "flag:\"0\"")) {
                logger.error("jx189 login request is error! errormessage: get user type failed");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }

            String areaCode = PatternUtils.group(pageContent, "s\\d+\\['area_code'\\]=\"(\\d+)\"", 1);
            if (StringUtils.isBlank(areaCode)) {
                logger.error("jx189 login request is error! errormessage: get area code failed");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }
            TaskUtils.addTaskShare(param.getTaskId(), "areaCode", areaCode);

            //验证图片验证码
            templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" + "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" + "&c0-param0=string:WB_TEST_VALIDCODE" + "&c0-param1=boolean:false" + "&c0-e1=string:" + param.getPicCode() + "&c0-param2=Object_Object:{valid_code_input:reference:c0-e1}" + "&batchId=3";
            referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_006").setFullUrl(templateUrl).setReferer(referer).setRequestBody(templateData,ContentType.TEXT_PLAIN).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.containsNone(pageContent, "\"OK\"")) {
                logger.error("jx189 login request is error! errormessage: 图形验证码错误");
                return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
            }

            //登录
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript2);
            String encryptSmsCode = invocable.invokeFunction("encryptedString", new Object[] {modulus,param.getSmsCode()}).toString();
            String encryptMobile = invocable.invokeFunction("encryptedString", new Object[] {modulus,param.getMobile().toString()}).toString();
            templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            templateData = "callCount=1" + "&page=/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=" + "&httpSessionId=" + "&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service" + "&c0-methodName=excute" + "&c0-id=0" + "&c0-param0=string:MWB_WT_USERLOGIN" + "&c0-param1=boolean:false" + "&c0-e1=string:22" + "&c0-e2=string:80000045" + "&c0-e3=string:" + encryptSmsCode + "&c0-e4=string:" + encryptMobile + "&c0-e5=string:" + areaCode + "&c0-e6=string:1" + "&c0-param2=Object_Object:{LOGIN_TYPE:reference:c0-e1, LOGIN_PRODUCT_ID:reference:c0-e2, LOGIN_PASSWD:reference:c0-e3, LOGIN_NAME:reference:c0-e4, AREA_CODE:reference:c0-e5, MY_CHECK_FLAG:reference:c0-e6}" + "&batchId=5";
            referer = "http://jx.189.cn/public/v4/logon/loginPop.jsp?from_sc=service_login&ret_url=";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_007").setFullUrl(templateUrl).setReferer(referer).setRequestBody(templateData,ContentType.TEXT_PLAIN).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isNotBlank(pageContent) && StringUtils.contains(pageContent, String.valueOf(param.getMobile())) && StringUtils.contains(pageContent, "IS_SUCCESS':\"1")) {
                logger.info("mobile login success!,set cookie string: " + TaskUtils.getCookieString(param.getTaskId()));
                String cookieStr = TaskUtils.getCookieString(param.getTaskId());

                templateUrl = "http://login.189.cn/";
                referer = "http://www.189.cn/html/login/index.html";
                response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_008").setFullUrl(templateUrl).setReferer(referer).invoke();
                if (StringUtils.isBlank(response.getPageContent())) {
                    logger.error("jx189 login request is error! errormessage: pre login failed");
                    return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
                }

                invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript1);
                String encryptPassWord = invocable.invokeFunction("aesEncrypt", param.getPassword()).toString();
                templateUrl = "http://login.189.cn/login";
                templateData = "Account=" + param.getMobile() + "&UType=201&ProvinceID=15&AreaCode=&CityNo=&RandomFlag=0&Password=" + URLEncoder.encode(encryptPassWord, "UTF-8") + "&Captcha=";
                referer = "http://login.189.cn/login";
                response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_009").setFullUrl(templateUrl).setReferer(referer).setRequestBody(templateData).invoke();
                if (StringUtils.isBlank(response.getPageContent())) {
                    logger.error("jx189 login request loginre.189.cn error");
                    return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
                }

                templateUrl = "http://www.189.cn/login/index.do";
                referer = "http://www.189.cn/html/login/index.html";
                response = TaskHttpClient.create(param, RequestType.GET, "jiang_xi_10000_web_010").setFullUrl(templateUrl).setReferer(referer).invoke();
                pageContent = response.getPageContent();
                if (StringUtils.containsNone(pageContent, "code\":\"0")) {
                    logger.error("jx189 login check password failed");
                    return result.failure(ErrorCode.NOT_EMPTY_ERROR_CODE);
                }
                TaskUtils.addTaskShare(param.getTaskId(), PluginConstants.COOKIE, cookieStr);
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},pageContent={}", param, pageContent);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1&page=/2017/details.jsp&httpSessionId=&scriptSessionId=" + scriptSessionId + "c0-scriptName=Service&c0-methodName=excute&" + "c0-id=0&" + "c0-param0=string:DETAILS_SERVICE&" + "c0-param1=boolean:false&" + "c0-e1=string:SEND_SMS_CODE&" + "c0-param2=Object_Object:{method:reference:c0-e1}&" + "batchId=1";
            String referer = "http://jx.189.cn/2017/details.jsp";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_011").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(referer,ContentType.TEXT_PLAIN).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "CODE:\"1\"")) {
                logger.info("详单-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            SimpleDateFormat format = new SimpleDateFormat("yyyyMM");
            String queryMonth = format.format(new Date());
            String templateUrl = "http://jx.189.cn/dwr/call/plaincall/Service.excute.dwr";
            String templateData = "callCount=1&page=/2017/details.jsp&httpSessionId=&scriptSessionId=" + scriptSessionId + "&c0-scriptName=Service&c0-methodName=excute&c0-id=0&c0-param0=string:DETAILS_SERVICE&c0-param1=boolean:false&c0-e1=string:" + queryMonth + "&c0-e2=string:7&c0-e3=string:${smsCode}&c0-e4=string:QRY_DETAILS_BY_LOGIN_NBR&c0-param2=Object_Object:{month:reference:c0-e1, query_type:reference:c0-e2, valid_code:reference:c0-e3, method:reference:c0-e4}&batchId=2";
            String referer = "http://jx.189.cn/2017/details.jsp";
            response = TaskHttpClient.create(param, RequestType.POST, "jiang_xi_10000_web_012").setFullUrl(templateUrl).setRequestBody(templateData,ContentType.TEXT_PLAIN).setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            TaskUtils.addTaskShare(param.getTaskId(), "scriptSessionId", scriptSessionId);
            if (StringUtils.contains(pageContent, "CODE:\"1\"")) {
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_UNEXPECTED_RESULT);
            }

        } catch (Exception e) {
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }
    }

    private String getRandomNumber() {
        int number = 0;
        while (true) {
            number = (int) (Math.random() * 1000);
            if (number >= 100 && number < 1000) {
                break;
            }
        }
        return String.valueOf(number);

    }
}