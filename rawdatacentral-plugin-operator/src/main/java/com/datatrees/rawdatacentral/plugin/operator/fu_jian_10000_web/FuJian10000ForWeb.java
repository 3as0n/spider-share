package com.datatrees.rawdatacentral.plugin.operator.fu_jian_10000_web;

import javax.script.Invocable;
import java.io.InputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import com.datatrees.common.util.PatternUtils;
import com.datatrees.crawler.core.util.xpath.XPathUtil;
import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.RedisUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.rawdatacentral.common.utils.TemplateUtils;
import com.datatrees.rawdatacentral.domain.constant.FormType;
import com.datatrees.rawdatacentral.domain.enums.ErrorCode;
import com.datatrees.rawdatacentral.domain.enums.RequestType;
import com.datatrees.rawdatacentral.domain.operator.OperatorParam;
import com.datatrees.rawdatacentral.domain.result.HttpResult;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.rawdatacentral.service.OperatorPluginService;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.entity.ContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 因web版个人信息不足，需从wap版查询 姓名、身份证、入网时间
 * Created by guimeichao on 17/9/19.
 */
public class FuJian10000ForWeb implements OperatorPluginService {

    private static final Logger logger         = LoggerFactory.getLogger(FuJian10000ForWeb.class);
    private static final String javaScript_wap
                                               = "";
    private static final String javaScript_web
                                               = "";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            //String templateUrl = "http://wapfj.189.cn/";
            //response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_001").setFullUrl(templateUrl).invoke();

            String templateUrl = "http://wapfj.189.cn/login/otherlogin.shtml";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_002").setFullUrl(templateUrl).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("登录-->初始化失败,param={},response={}", param, response);
                return result.failure(ErrorCode.TASK_INIT_ERROR);
            }
            String servType = "50";
            String modulus
                    = "9417c1a4cfb44407cf42c3b7edf50260c89a7a2bc9fdef0c66da925c86bd5bc8787f02f91528cab222ba8b5d34eafd0bd4bd7a5f1dc49a828635a8a0add8d67b";
            String loginType = "2";
            String empoent = "10001";
            String barkUrl = StringUtils.EMPTY;
            List<String> servTypeList = XPathUtil.getXpath("//input[@name='wapInfo.servType']/@value", pageContent);
            if (!CollectionUtils.isEmpty(servTypeList)) {
                servType = servTypeList.get(0);
            }
            List<String> loginTypeList = XPathUtil.getXpath("//input[@name='wapInfo.loginType']/@value", pageContent);
            if (!CollectionUtils.isEmpty(loginTypeList)) {
                loginType = loginTypeList.get(0);
            }
            List<String> moduleList = XPathUtil.getXpath("//input[@name='module']/@value", pageContent);
            if (!CollectionUtils.isEmpty(moduleList)) {
                modulus = moduleList.get(0);
            }
            List<String> empoentList = XPathUtil.getXpath("//input[@name='empoent']/@value", pageContent);
            if (!CollectionUtils.isEmpty(empoentList)) {
                empoent = empoentList.get(0);
            }
            List<String> backURLList = XPathUtil.getXpath("//input[@name='backURL']/@value", pageContent);
            if (!CollectionUtils.isEmpty(backURLList)) {
                barkUrl = backURLList.get(0);
            }
            TaskUtils.addTaskShare(param.getTaskId(), "servType", servType);
            TaskUtils.addTaskShare(param.getTaskId(), "modulus", modulus);
            TaskUtils.addTaskShare(param.getTaskId(), "loginType", loginType);
            TaskUtils.addTaskShare(param.getTaskId(), "empoent", empoent);
            TaskUtils.addTaskShare(param.getTaskId(), "barkUrl", barkUrl);
            return result.success();
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshPicCodeForLogin(param);
            default:
                return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return new HttpResult<Object>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    private HttpResult<String> refeshPicCodeForLogin(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        Response response = null;
        try {
            String referer = "http://wapfj.189.cn/login/otherlogin.shtml";
            String templateUrl = "http://wapfj.189.cn/wapimagecode";
            response = TaskHttpClient.create(param.getTaskId(), param.getWebsiteName(), RequestType.GET, "fu_jian_10000_web_003")
                    .setFullUrl(templateUrl).setReferer(referer).invoke();
            logger.info("登录-->图片验证码-->刷新成功,param={}", param);
            return result.success(response.getPageContentForBase64());
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPassword(), ErrorCode.EMPTY_PASSWORD);
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            /**
             * 通过登录wap版获取 姓名、身份证、入网时间
             */
            String servType = TaskUtils.getTaskShare(param.getTaskId(), "servType");
            String loginType = TaskUtils.getTaskShare(param.getTaskId(), "loginType");
            String modulus = TaskUtils.getTaskShare(param.getTaskId(), "modulus");
            String empoent = TaskUtils.getTaskShare(param.getTaskId(), "empoent");
            String barkUrl = TaskUtils.getTaskShare(param.getTaskId(), "barkUrl");

            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript_wap);
            String encryptMobile = invocable.invokeFunction("encryptedString", modulus, param.getMobile().toString()).toString();
            String encryptPassword = invocable.invokeFunction("encryptedString", modulus, param.getPassword()).toString();

            String referer = "http://wapfj.189.cn/login/otherlogin.shtml";
            String templateUrl = "http://wapfj.189.cn/login/changenbrlogin.shtml";
            String templateData = "unGet=&wapInfo.servType={}&wapInfo.loginType={}&module={}&empoent={}&backURL={}&accnbr={}&mm={}&wapInfo" +
                    ".validationCode={}";
            String data = TemplateUtils
                    .format(templateData, servType, loginType, modulus, empoent, barkUrl, encryptMobile, encryptPassword, param.getPicCode());
            response = TaskHttpClient.create(param, RequestType.POST, "fu_jian_10000_web_004").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(data).invoke();
            referer = "http://wapfj.189.cn/";
            templateUrl = "http://wapfj.189.cn/service/queryWapInfo.shtml";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_005").setFullUrl(templateUrl).setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, param.getMobile().toString())) {
                String customerName = PatternUtils.group(pageContent, "客户姓名：</strong>([^：]+)<br/", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "customerName", customerName);
                String idCardNo = PatternUtils.group(pageContent, "证件号码：</strong>([^：]+)<br/", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "idCardNo", idCardNo);
                String joinDate = PatternUtils.group(pageContent, "开通时间：</strong>([^：]+)<br/", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "joinDate", joinDate);
            } else {
                logger.error("登陆失败,wap版登陆失败,param={},response={}", param, response);
                //return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }

            RedisUtils.del("task.cookie." + param.getTaskId());
            /**
             * 登录web版
             */

            invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript_web);
            encryptPassword = invocable.invokeFunction("aesEncrypt", param.getPassword()).toString();

            referer = "http://login.189.cn/login";
            templateUrl = "http://login.189.cn/login";
            templateData = "Account={}&UType=201&ProvinceID=14&AreaCode=&CityNo=&RandomFlag=0&Password={}&Captcha=";
            data = TemplateUtils.format(templateData, param.getMobile(), URLEncoder.encode(encryptPassword, "UTF-8"));
            response = TaskHttpClient.create(param, RequestType.POST, "fu_jian_10000_web_006").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(data).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("登陆失败,param={},response={}", param, response);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
            String resultCode = PatternUtils.group(pageContent, "data-resultcode=\"(\\d+)\"", 1);
            if (resultCode != null) {
                if (resultCode.equals("9103") || resultCode.equals("9999")) {
                    logger.error("登陆失败,账户名与密码不匹配,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                } else if (resultCode.equals("8105")) {
                    logger.error("登陆失败,密码过于简单,请重置,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                } else if (resultCode.equals("9111")) {
                    logger.error("登陆失败,登录失败过多，帐号已被锁定,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                } else if (resultCode.equals("9100")) {
                    logger.error("登陆失败,该账户不存在,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PHONE_FAIL);
                } else if (resultCode.equals("6113")) {
                    logger.error("登陆失败,系统繁忙，稍后重试,param={},response={}", param, response);
                    return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
                } else if (StringUtils.isNotBlank(resultCode)) {
                    logger.error("登陆失败,param={},response={}", param, response);
                    return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
                }
            }

            referer = "http://www.189.cn/fj/";
            templateUrl = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=01420648";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_007").setFullUrl(templateUrl).setReferer(referer).invoke();

            referer = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=01420648";
            templateUrl = "http://www.189.cn/login/sso/ecs.do?method=linkTo&platNo=10014&toStUrl=http://fj.189.cn/newcmsweb/commonIframe" +
                    ".jsp?URLPATH=/service/bill/realtime.jsp&fastcode=01420648&cityCode=fj";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_008").setFullUrl(templateUrl).setReferer(referer).invoke();

            referer = "http://fj.189.cn/service/bill/realtime.jsp";
            templateUrl = "http://fj.189.cn/BillAjaxServlet.do?method=realtime&PRODNO={}&PRODTYPE=50";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_009").setFullUrl(templateUrl, param.getMobile())
                    .setReferer(referer).invoke();
            pageContent = response.getPageContent();

            if (StringUtils.contains(pageContent, "获取话费成功") || StringUtils.contains(pageContent, "暂不提供数据")) {
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},pageContent={}", param, pageContent);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String cityCode = TaskUtils.getTaskContext(param.getTaskId(), "cityCode");
            String templateUrl = "http://fj.189.cn/service/bill/detail.jsp";
            String referer = "http://fj.189.cn/service/smdj/checkSmdj.jsp";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_010").setFullUrl(templateUrl).setReferer(referer).invoke();

            SimpleDateFormat sf = new SimpleDateFormat("yyyyMM");
            Calendar c = Calendar.getInstance();
            c.add(Calendar.MONTH, -1);
            String billMonth = sf.format(c.getTime());

            referer = "http://fj.189.cn/service/bill/detail.jsp";
            templateUrl = "http://fj.189.cn/service/bill/tanChu.jsp?PRODNO={}&PRODTYPE=50&CITYCODE={}&MONTH={}&SELTYPE=1";
            response = TaskHttpClient.create(param, RequestType.GET, "fu_jian_10000_web_011")
                    .setFullUrl(templateUrl, param.getMobile(), cityCode, billMonth).setReferer(referer).invoke();
            String pageContent = response.getPageContent();

            if (StringUtils.isNotBlank(pageContent)) {
                cityCode = PatternUtils.group(pageContent, "id=\"CITYCODE\" value=\"([^\"]+)\"", 1);
            } else {
                cityCode = "0" + cityCode;
            }

            TaskUtils.addTaskShare(param.getTaskId(), "fullcityCode", cityCode);

            referer = templateUrl;
            templateUrl = "http://fj.189.cn/BUFFALO/buffalo/QueryAllAjax";
            String templateData = "<buffalo-call><method>getCDMASmsCode</method><map><type>java.util" +
                    ".HashMap</type><string>PHONENUM</string><string>{}</string><string>PRODUCTID</string><string>50</string><string>CITYCODE" +
                    "</string><string>{}</string><string>I_ISLIMIT</string><string>1</string><string>QUERYTYPE</string><string>BILL</string></map" +
                    "></buffalo-call>";
            String data = TemplateUtils.format(templateData, param.getMobile(), cityCode);
            response = TaskHttpClient.create(param, RequestType.POST, "fu_jian_10000_web_012").setFullUrl(templateUrl)
                    .setRequestBody(data, ContentType.TEXT_XML).setReferer(referer).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "短信随机密码已经发到您的手机")) {
                logger.info("详单-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            SimpleDateFormat sf = new SimpleDateFormat("yyyyMM");
            Calendar c = Calendar.getInstance();
            String billMonth = sf.format(c.getTime());

            String fullcityCode = TaskUtils.getTaskShare(param.getTaskId(), "fullcityCode");
            String puridID = "0";
            String emailEmpoent = "10001";
            String emailModule
                    = "863581c5892cdfe8a67b95c7abb47ead8b102e9620994ae95637f637fa22acac173b91015574507362816b30a884632d8562bf20de621d31d745291aaec7ca6f";
            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("fu_jian_10000_web/des_wap.js");
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript_wap);
            String encryptPassword = invocable.invokeFunction("encryptedString", emailModule, param.getPassword()).toString();

            String templateUrl = "http://fj.189.cn/service/bill/trans.jsp";
            String templateData = "PRODNO={}&PRODTYPE=50&CITYCODE={}&SELTYPE=1&MONTH={}&PURID={}&email_empoent={}&email_module={}&serPwd50" +
                    "={}&randomPwd={}";
            String data = TemplateUtils
                    .format(templateData, param.getMobile(), fullcityCode, billMonth, puridID, emailEmpoent, emailModule, encryptPassword,
                            param.getSmsCode());
            response = TaskHttpClient.create(param, RequestType.POST, "fu_jian_10000_web_013").setFullUrl(templateUrl).setRequestBody(data).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "暂无您所查询的数据清单") || StringUtils.contains(pageContent, "客户姓名")) {
                String encryptMobile = PatternUtils.group(pageContent, "PRODNO=([^\"=]+)=", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "encryptMobile", encryptMobile);
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }
    }
}
