package com.datatrees.rawdatacentral.plugin.operator.ji_lin_10000_web;

import javax.script.Invocable;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.datatrees.common.util.PatternUtils;
import com.datatrees.crawler.core.processor.common.ProcessorContextUtil;
import com.datatrees.crawler.core.processor.plugin.PluginFactory;
import com.datatrees.crawler.core.util.xpath.XPathUtil;
import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.RedisUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.rawdatacentral.domain.constant.FormType;
import com.datatrees.rawdatacentral.domain.enums.ErrorCode;
import com.datatrees.rawdatacentral.domain.enums.RequestType;
import com.datatrees.rawdatacentral.domain.operator.OperatorParam;
import com.datatrees.rawdatacentral.domain.result.HttpResult;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.rawdatacentral.service.OperatorPluginService;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;

/**
 * 吉林电信web端
 * 登录 wap端手机号，服务密码，图片验证码
 * 详单查询 短信验证码和两次图片验证码
 * User: yand
 * Date: 2017/10/10
 */
public class JiLin10000ForWeb implements OperatorPluginService {

    private static       Logger logger     = LoggerFactory.getLogger(JiLin10000ForWeb.class);
    private              String preUrl     = "http://jl.189.cn/service/bill/toDetailBillFra.action?cityCode=jl&fastcode=00710602";
    private              String pscToken   = "nqnfydcxen";
    private              String queryType  = "4";
    private              String areaCode   = "";
    private              String pwdType    = "2";
    private              String firstInput = "y";
    private              String url        = StringUtils.EMPTY;
    private static final String javaScript = "";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://wapjl.189.cn/";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_001").setFullUrl(templateUrl).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("get encrypt param:初始化失败!");
                return result.failure(ErrorCode.TASK_INIT_ERROR);
            }
            List<String> pscTokenList = XPathUtil.getXpath("//input[@id='pscToken']/@value", pageContent);
            if (!CollectionUtils.isEmpty(pscTokenList)) {
                pscToken = pscTokenList.get(0);
            }
            List<String> queryTypeList = XPathUtil.getXpath("//input[@name='queryType']/@value", pageContent);
            if (!CollectionUtils.isEmpty(queryTypeList)) {
                queryType = queryTypeList.get(0);
            }
            List<String> areaCodeList = XPathUtil.getXpath("//input[@name='areaCode']/@value", pageContent);
            if (!CollectionUtils.isEmpty(areaCodeList)) {
                areaCode = areaCodeList.get(0);
            }
            List<String> pwdTypeList = XPathUtil.getXpath("//input[@name='pwdType']/@value", pageContent);
            if (!CollectionUtils.isEmpty(pwdTypeList)) {
                pwdType = pwdTypeList.get(0);
            }
            List<String> firstInputList = XPathUtil.getXpath("//input[@name='firstInput']/@value", pageContent);
            if (!CollectionUtils.isEmpty(firstInputList)) {
                firstInput = firstInputList.get(0);
            }
            List<String> urlList = XPathUtil.getXpath("//input[@name='url']/@value", pageContent);
            if (!CollectionUtils.isEmpty(urlList)) {
                url = urlList.get(0);
            }
            return result.success();
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={}", param, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshPicCodeForLogin(param);
            case FormType.VALIDATE_USER_INFO:
                return refeshPicCodeForUserInfo(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshPicCodeForBillDetail(param);
            default:
                return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }



    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.VALIDATE_USER_INFO:
                return validatePicCodeForUserInfo(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }



    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return null;
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }


    private HttpResult<String> refeshPicCodeForLogin(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://wapjl.189.cn/authImg?" + Math.random();
            String referer = "http://wapjl.189.cn/";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_002").setFullUrl(templateUrl).setReferer(referer).invoke();
            logger.info("登录-->图片验证码-->刷新成功,param={}", param);
            return result.success(response.getPageContentForBase64());
        } catch (Exception e) {
            logger.error("登录-->图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            //wap端登录
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript);
            String encryptPassword = invocable.invokeFunction("encrypt", new Object[]{pscToken, param.getPassword()}).toString();
            String templateUrl = "http://wapjl.189.cn/echn/login/login.action";
            String templateData = "queryValue=" + param.getMobile() + "&passWord=" + encryptPassword + "&randCode=" + param.getPicCode() + "&queryType=" + queryType + "&areaCode=" + areaCode + "&pwdType=" + pwdType + "&firstInput=" + firstInput + "&changeLoginFlag=&returnUrlFlag=&url=" + URLEncoder.encode(url, "UTF-8");
            String referer = "http://wapjl.189.cn/";
            response = TaskHttpClient.create(param, RequestType.POST, "ji_lin_10000_web_003").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            List<String> list = XPathUtil.getXpath("div:has(form):not(:has(div)) span:eq(0)/text()", pageContent);
            String msg = StringUtils.EMPTY;
            if (!CollectionUtils.isEmpty(list)) {
                msg = list.get(0);
            }
            if (StringUtils.isBlank(msg)) {
                list = XPathUtil.getXpath("span:has(img) + span/text()", pageContent);
                if (!CollectionUtils.isEmpty(list)) {
                    msg = list.get(0);
                }
            }
            templateUrl = "http://wapjl.189.cn/custquery/customerInfoQuery.action?servId=154";
            referer = "http://wapjl.189.cn/";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_004").setFullUrl(templateUrl).setReferer(referer).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, String.valueOf(param.getMobile()))) {
                String customerName = PatternUtils.group(pageContent, "客户姓名：<\\/strong>\\s*([^：]+)\\s*<br", 1);
                customerName = PatternUtils.group(customerName, "(\\S*)", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "customerName", customerName);
                String idCardNo = PatternUtils.group(pageContent, "证件号码：<\\/strong>\\s*([^：]+)\\s*<br", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "idCardNo", idCardNo);
                String joinDate = PatternUtils.group(pageContent, "开通时间：<\\/strong>\\s*([^：]+)\\s*<\\/div>", 1);
                TaskUtils.addTaskShare(param.getTaskId(), "joinDate", joinDate);
            } else {
                logger.error("wapjl189 login is error! errormessage: " + msg);
                logger.error(pageContent);
            }
            //删除cookie
            RedisUtils.del("task.cookie." + param.getTaskId());

            //web端登录
            templateUrl = "http://login.189.cn/login";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_005").setFullUrl(templateUrl).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("jl189 login request is error! errormessage: pre login failed");
                return result.failure(ErrorCode.RESPONSE_EMPTY_ERROR_CODE);
            }

            encryptPassword = invocable.invokeFunction("aesEncrypt", param.getPassword()).toString();
            templateUrl = "http://login.189.cn/login";
            templateData = "Account=" + param.getMobile() + "&UType=201&ProvinceID=09&AreaCode=&CityNo=&RandomFlag=0&Password=" + URLEncoder.encode(encryptPassword, "UTF-8") + "&Captcha=";
            referer = "http://login.189.cn/login";
            response = TaskHttpClient.create(param, RequestType.POST, "ji_lin_10000_web_006").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(referer).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("登录异常，请稍后重试。");
                return result.failure(ErrorCode.RESPONSE_EMPTY_ERROR_CODE);
            }

            templateUrl = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=00710602";
            referer = "http://www.189.cn/jl/";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_007").setFullUrl(templateUrl).setReferer(referer).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent) || StringUtils.containsNone(pageContent, "个人信息")) {
                logger.error("jl189 login failed! errormessage:login failed");
                return result.failure(ErrorCode.RESPONSE_EMPTY_ERROR_CODE);
            }

            templateUrl = "http://www.189.cn/login/index.do";
            referer = "http://www.189.cn/html/login/index.html";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_008").setFullUrl(templateUrl).setReferer(referer).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isNotBlank(pageContent) && StringUtils.contains(pageContent, "errorDescription\":null")) {
                String cookieStr = TaskUtils.getCookieString(param.getTaskId());
                logger.info("mobile login success!,set cookie string: " + cookieStr);
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},pageContent={}", param, pageContent);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }
    }

    private HttpResult<String> refeshPicCodeForUserInfo(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://www.189.cn/dqmh/my189/checkMy189Session.do";
            String templateData = "fastcode=00710602";
            String referer = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=00710599";
            response = TaskHttpClient.create(param, RequestType.POST, "ji_lin_10000_web_009").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(referer).invoke();
            String pageContent = response.getPageContent();

            templateUrl = "http://www.189.cn/login/sso/ecs.do?method=linkTo&platNo=10030&toStUrl=http://jl.189.cn/service/bill/toDetailBillFra.action?fastcode=00710602&cityCode=jl";
            referer = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=00710602";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_0010").setFullUrl(templateUrl).setReferer(referer).invoke();
            pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent) || StringUtils.containsNone(pageContent, "证件号码")) {
                logger.error("requestUrl is wrong!");
                return result.failure(ErrorCode.RESPONSE_EMPTY_ERROR_CODE);
            }
            templateUrl = "http://jl.189.cn/authImg";
            preUrl = response.getRedirectUrl();
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_0011").setFullUrl(templateUrl).setReferer(preUrl).invoke();
            logger.info("详单-->图片验证码-->刷新成功,param={}", param);
            return result.success(response.getPageContentForBase64());
        } catch (Exception e) {
            logger.error("详单-->图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> validatePicCodeForUserInfo(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPicCode(), ErrorCode.EMPTY_PIC_CODE);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String templateUrl = "http://jl.189.cn/realname/checkIdCardFra.action";
            String templateData = "ruleDetalId=109&certCode=" + param.getIdCard() + "&custName=" + param.getRealName() + "&randCode=" + param.getPicCode();
            response = TaskHttpClient.create(param, RequestType.POST, "ji_lin_10000_web_0012").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(preUrl).invoke();
            String pageContent = response.getPageContent();
            if(StringUtils.isNotBlank(pageContent) && StringUtils.contains(pageContent,"result\":\"0")){
                logger.info("详单-->图片验证码-->校验成功,param={}", param);
                return result.success();
            }else{
                logger.error("详单-->图片验证码-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_PIC_CODE_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->图片验证码-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_PIC_CODE_ERROR);
        }
    }

    private HttpResult<String> refeshPicCodeForBillDetail(OperatorParam param) {
        HttpResult<String> result = new HttpResult<>();
        Response response = null;
        try{
            String templateUrl = "http://jl.189.cn/service/bill/toDetailBillFra.action?cityCode=jl&fastcode=00710602";
            String referer = "http://jl.189.cn/service/bill/toDetailBillFra.action?fastcode=00710602&cityCode=jl";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_0013").setFullUrl(templateUrl).setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent) || StringUtils.containsNone(pageContent, "短信验证码")) {
                logger.error("requestUrl is wrong!");
                return result.failure(ErrorCode.RESPONSE_EMPTY_ERROR_CODE);
            }

            templateUrl = "http://jl.189.cn/authImg?1";
            referer = "http://jl.189.cn/service/bill/toDetailBillFra.action?cityCode=jl&fastcode=00710602";
            response = TaskHttpClient.create(param, RequestType.GET, "ji_lin_10000_web_0014").setFullUrl(templateUrl).setReferer(referer).invoke();
            TaskUtils.addTaskShare(param.getTaskId(), "secondPicCode", response.getPageContentForBase64());

            logger.info("详单-->第二次图片验证码-->刷新成功,param={}", param);
            return result.success();
        }catch (Exception e){
            logger.error("详单-->第二次图片验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }

    }

    private HttpResult<Map<String,Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try{
            logger.info("详单-->短信验证码-->刷新成功,param={}", param);
            return result.success();
        }catch (Exception e){
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_PIC_CODE_ERROR);
        }
    }

    private HttpResult<Map<String,Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = validatePicCodeForUserInfo(param);
        if (!result.getStatus()) {
            return result;
        }
        Response response = null;
        try{
            String templateUrl = "http://jl.189.cn/service/transaction/qryInacWorkOrder.action";
            String templateData = "fromPage=XDCX";
            String referer = "http://jl.189.cn/service/bill/toDetailBillFra.action?cityCode=jl&fastcode=00710602";
            response = TaskHttpClient.create(param, RequestType.POST, "ji_lin_10000_web_0015").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(referer).invoke();

            String secondPicCode = TaskUtils.getTaskShare(param.getTaskId(), "secondPicCode");
            templateUrl = "http://jl.189.cn/service/bill/doDetailBillFra.action";
            templateData = "sRandomCode=" + param.getSmsCode() + "&randCode=" + secondPicCode;
            referer = "http://jl.189.cn/service/bill/toDetailBillFra.action?cityCode=jl&fastcode=00710602";
            response = TaskHttpClient.create(param, RequestType.POST, "ji_lin_10000_web_0015").setFullUrl(templateUrl).setRequestBody(templateData).setReferer(referer).invoke();
            String pageContent = response.getPageContent();
            if(StringUtils.isNotBlank(pageContent) && StringUtils.containsNone(pageContent,"billDetailValidate\":\"true")){
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            }else{
                logger.error("详单-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_UNEXPECTED_RESULT);
            }
        }catch (Exception e){
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }
    }

}


