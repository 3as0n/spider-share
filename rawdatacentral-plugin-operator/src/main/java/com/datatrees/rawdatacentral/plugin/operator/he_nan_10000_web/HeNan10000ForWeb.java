package com.datatrees.rawdatacentral.plugin.operator.he_nan_10000_web;

import com.datatrees.common.util.PatternUtils;
import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.rawdatacentral.common.utils.TemplateUtils;
import com.datatrees.rawdatacentral.domain.constant.FormType;
import com.datatrees.rawdatacentral.domain.enums.ErrorCode;
import com.datatrees.rawdatacentral.domain.enums.RequestType;
import com.datatrees.rawdatacentral.domain.operator.OperatorParam;
import com.datatrees.rawdatacentral.domain.result.HttpResult;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.rawdatacentral.service.OperatorPluginService;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.script.Invocable;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Map;

/**
 *
 * User: yand
 * Date: 2017/9/21
 */
public class HeNan10000ForWeb implements OperatorPluginService {
    private static final Logger logger = LoggerFactory.getLogger(HeNan10000ForWeb.class);
    private static final String javaScript = "";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        try {
            return result.success();
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={}", param, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return new HttpResult<Object>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }


    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }


    private HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPassword(), ErrorCode.EMPTY_PASSWORD);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;

        try {
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript);
            String encryptPassword = invocable.invokeFunction("aesEncrypt", param.getPassword()).toString();

            String referer = "http://login.189.cn/login";
            String templateUrl = "http://login.189.cn/login";
            String templateData = "Account={}&UType=201&ProvinceID=17&AreaCode=&CityNo=&RandomFlag=0&Password={}&Captcha=";
            String data = TemplateUtils.format(templateData, param.getMobile(), URLEncoder.encode(encryptPassword, "UTF-8"));
            response = TaskHttpClient.create(param, RequestType.POST, "he_nan_10000_web_001").setFullUrl(templateUrl).setReferer(referer)
                    .setRequestBody(data).invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.isBlank(pageContent)) {
                logger.error("登陆失败,param={},response={}", param, response);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
            String resultCode = PatternUtils.group(pageContent, "data-resultcode=\"(\\d+)\"", 1);
            if (resultCode != null) {
                if (resultCode.equals("9103") || resultCode.equals("9999")) {
                    logger.error("登陆失败,账户名与密码不匹配,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                } else if (resultCode.equals("8105")) {
                    logger.error("登陆失败,密码过于简单,请重置,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                } else if (resultCode.equals("9111")) {
                    logger.error("登陆失败,登录失败过多，帐号已被锁定,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PASSWORD_FAIL);
                } else if (resultCode.equals("9100")) {
                    logger.error("登陆失败,该账户不存在,param={},response={}", param, response);
                    return result.failure(ErrorCode.VALIDATE_PHONE_FAIL);
                } else if (resultCode.equals("6113")) {
                    logger.error("登陆失败,系统繁忙，稍后重试,param={},response={}", param, response);
                    return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
                } else if (StringUtils.isNotBlank(resultCode)) {
                    logger.error("登陆失败,param={},response={}", param, response);
                    return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
                }
            }

            templateUrl = "http://www.189.cn/ha/";
            response = TaskHttpClient.create(param, RequestType.GET, "he_nan_10000_web_002").setFullUrl(templateUrl).invoke();

            referer = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=20000354";
            templateUrl = "http://www.189.cn/login/sso/ecs.do?method=linkTo&platNo=10017&toStUrl=http://ha.189.cn/service/iframe/feeQuery_iframe.jsp?SERV_NO=FSE-2-1&fastcode=20000354&cityCode=ha";
            response = TaskHttpClient.create(param, RequestType.GET, "he_nan_10000_web_003").setFullUrl(templateUrl).setReferer(referer).invoke();

            referer = "http://ha.189.cn/service/iframe/feeQuery_iframe.jsp?SERV_NO=FSE-2-1&fastcode=20000354&cityCode=ha";
            templateUrl = "http://ha.189.cn/service/iframe/bill/iframe_ye.jsp\"ACC_NBR=" + param.getMobile() + "&PROD_TYPE=713058010165&ACCTNBR97=";
            response = TaskHttpClient.create(param, RequestType.GET, "he_nan_10000_web_004").setFullUrl(templateUrl).setReferer(referer).invoke();
            pageContent = response.getPageContent();

            if (StringUtils.contains(pageContent, String.valueOf(param.getMobile())) && StringUtils.contains(pageContent, "可用余额")) {
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},pageContent={}", param, pageContent);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }

    }


    private HttpResult<Map<String, Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 0);
        try {
            String referer = "http://www.189.cn/dqmh/my189/initMy189home.do?fastcode=20000354";
            String templateUrl = "http://ha.189.cn/service/iframe/feeQuery_iframe.jsp?SERV_NO=FSE-2-2&fastcode=20000356&cityCode=ha";
            response = TaskHttpClient.create(param, RequestType.GET, "he_nan_10000_web_005").setFullUrl(templateUrl).setReferer(referer)
                    .invoke();
            String pageContent = response.getPageContent();
            String PRODTYPE = PatternUtils.group(pageContent, "doQuery\\('(\\d+)','(\\d+)',''\\)", 2);
            TaskUtils.addTaskShare(param.getTaskId(), "PRODTYPE", PRODTYPE);

            referer = "http://ha.189.cn/service/iframe/feeQuery_iframe.jsp?SERV_NO=FSE-2-2&fastcode=20000356&cityCode=ha";
            templateUrl = "http://ha.189.cn/service/iframe/bill/iframe_inxxall.jsp\"ACC_NBR=" + param.getMobile() + "&PROD_TYPE="
                    + PRODTYPE + "&BEGIN_DATE=&END_DATE=&SERV_NO=&ValueType=1&REFRESH_FLAG=1&FIND_TYPE=1&radioQryType=on&QRY_FLAG=1&ACCT_DATE="
                    + sf.format(c.getTime()) + "&ACCT_DATE_1=" + sf.format(c.getTime());
            response = TaskHttpClient.create(param, RequestType.GET, "he_nan_10000_web_006").setFullUrl(templateUrl).setReferer(referer)
                    .invoke();
            if (StringUtils.isBlank(response.getPageContent())) {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
            String RAND_TYPE = PatternUtils.group(pageContent, "name=\"RAND_TYPE\" value=\"(\\d+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "RAND_TYPE", RAND_TYPE);
            String BureauCode = PatternUtils.group(pageContent, "name=\"BureauCode\" value=\"(\\d+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "BureauCode", BureauCode);
            String REFRESH_FLAG = PatternUtils.group(pageContent, "name=\"REFRESH_FLAG\" value=\"(\\d+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "REFRESH_FLAG", REFRESH_FLAG);
            String ACCT_DATE = PatternUtils.group(pageContent, "name=\"ACCT_DATE\" value=\"(\\d+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "ACCT_DATE", ACCT_DATE);
            String QRY_FLAG = PatternUtils.group(pageContent, "name=\"QRY_FLAG\" value=\"(\\d+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "QRY_FLAG", QRY_FLAG);
            String ValueType = PatternUtils.group(pageContent, "name=\"ValueType\" value=\"(\\d+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "ValueType", ValueType);
            String OPER_TYPE = PatternUtils.group(pageContent, "name=\"OPER_TYPE\" value=\"(\\w+)\"", 1);
            TaskUtils.addTaskShare(param.getTaskId(), "OPER_TYPE", OPER_TYPE);
            if (StringUtils.isBlank(PRODTYPE) || StringUtils.isBlank(RAND_TYPE) || StringUtils.isBlank(BureauCode)) {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, "param_PRODTYPE is null or param_RAND_TYPE is null or param_BureauCode is null");
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
            referer = "http://ha.189.cn/service/iframe/feeQuery_iframe.jsp?SERV_NO=FSE-2-2&fastcode=20000356&cityCode=ha";
            templateUrl = "http://ha.189.cn/service/bill/getRand.jsp?PRODTYPE=" + PRODTYPE + "&RAND_TYPE=" + RAND_TYPE
                    + "&BureauCode=" + BureauCode + "&ACC_NBR=" + param.getMobile() + "&PROD_TYPE=" + PRODTYPE + "&PROD_PWD=&REFRESH_FLAG="
                    + REFRESH_FLAG + "&BEGIN_DATE=&END_DATE=&ACCT_DATE=" + ACCT_DATE + "&FIND_TYPE=1&SERV_NO=&QRY_FLAG=" + QRY_FLAG
                    + "&ValueType=" + ValueType + "&MOBILE_NAME=" + param.getMobile() + "&OPER_TYPE=" + OPER_TYPE + "&PASSWORD=";
            response = TaskHttpClient.create(param, RequestType.POST, "he_nan_10000_web_007").setFullUrl(templateUrl).setReferer(referer)
                    .invoke();
            pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "<flag>0</flag>")) {
                logger.info("详单-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String PRODTYPE = TaskUtils.getTaskShare(param.getTaskId(), "PRODTYPE");
            String RAND_TYPE = TaskUtils.getTaskShare(param.getTaskId(), "RAND_TYPE");
            String BureauCode = TaskUtils.getTaskShare(param.getTaskId(), "BureauCode");
            String REFRESH_FLAG = TaskUtils.getTaskShare(param.getTaskId(), "REFRESH_FLAG");
            String ACCT_DATE = TaskUtils.getTaskShare(param.getTaskId(), "ACCT_DATE");
            String QRY_FLAG = TaskUtils.getTaskShare(param.getTaskId(), "QRY_FLAG");
            String ValueType = TaskUtils.getTaskShare(param.getTaskId(), "ValueType");
            String OPER_TYPE = TaskUtils.getTaskShare(param.getTaskId(), "OPER_TYPE");

            String referer = "http://ha.189.cn/service/iframe/feeQuery_iframe.jsp?SERV_NO=FSE-2-2&fastcode=20000356&cityCode=ha";
            String templateUrl = "http://ha.189.cn/service/iframe/bill/iframe_inxxall.jsp\"PRODTYPE=" + PRODTYPE + "&RAND_TYPE=" + RAND_TYPE
                    + "&BureauCode=" + BureauCode + "&ACC_NBR=" + param.getMobile() + "&PROD_TYPE=" + PRODTYPE + "&PROD_PWD=&REFRESH_FLAG="
                    + REFRESH_FLAG + "&BEGIN_DATE=&END_DATE=&ACCT_DATE=" + ACCT_DATE + "&FIND_TYPE=1&SERV_NO=&QRY_FLAG=" + QRY_FLAG
                    + "&ValueType=" + ValueType + "&MOBILE_NAME=" + param.getMobile() + "&OPER_TYPE=" + OPER_TYPE + "&PASSWORD=" + param.getSmsCode();
            response = TaskHttpClient.create(param, RequestType.GET, "he_nan_10000_web_008").setFullUrl(templateUrl).setReferer(referer)
                    .invoke();
            if (StringUtils.contains(response.getPageContent(), "开始时间")) {
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_UNEXPECTED_RESULT);
            }

        } catch (Exception e) {
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }

    }
}
