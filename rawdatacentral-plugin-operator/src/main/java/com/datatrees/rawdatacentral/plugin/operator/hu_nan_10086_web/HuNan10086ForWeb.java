package com.datatrees.rawdatacentral.plugin.operator.hu_nan_10086_web;

import javax.script.Invocable;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Map;

import com.datatrees.rawdatacentral.common.http.TaskHttpClient;
import com.datatrees.rawdatacentral.common.http.TaskUtils;
import com.datatrees.rawdatacentral.common.utils.CheckUtils;
import com.datatrees.rawdatacentral.common.utils.ScriptEngineUtil;
import com.datatrees.rawdatacentral.domain.constant.FormType;
import com.datatrees.rawdatacentral.domain.enums.ErrorCode;
import com.datatrees.rawdatacentral.domain.enums.RequestType;
import com.datatrees.rawdatacentral.domain.operator.OperatorParam;
import com.datatrees.rawdatacentral.domain.result.HttpResult;
import com.datatrees.rawdatacentral.domain.vo.Response;
import com.datatrees.rawdatacentral.service.OperatorPluginService;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Created by guimeichao on 17/9/14.
 */
public class HuNan10086ForWeb implements OperatorPluginService {

    private static final Logger logger     = LoggerFactory.getLogger(HuNan10086ForWeb.class);
    private static final String javaScript
                                           = "LyoqCiogREVT5Yqg5a+GL+ino+WvhgoqIEBDb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDA2CiogQGF1dGhvciBHdWFwbwoqIEBzZWUgREVTQ29yZQoqLwoKLyoKKiBlbmNyeXB0IHRoZSBzdHJpbmcgdG8gc3RyaW5nIG1hZGUgdXAgb2YgaGV4CiogcmV0dXJuIHRoZSBlbmNyeXB0ZWQgc3RyaW5nCiovCmZ1bmN0aW9uIHN0ckVuYyhkYXRhLGZpcnN0S2V5LHNlY29uZEtleSx0aGlyZEtleSl7CgogdmFyIGxlbmcgPSBkYXRhLmxlbmd0aDsKIHZhciBlbmNEYXRhID0gIiI7CiB2YXIgZmlyc3RLZXlCdCxzZWNvbmRLZXlCdCx0aGlyZEtleUJ0LGZpcnN0TGVuZ3RoLHNlY29uZExlbmd0aCx0aGlyZExlbmd0aDsKIGlmKGZpcnN0S2V5ICE9IG51bGwgJiYgZmlyc3RLZXkgIT0gIiIpeyAgICAKICAgZmlyc3RLZXlCdCA9IGdldEtleUJ5dGVzKGZpcnN0S2V5KTsKICAgZmlyc3RMZW5ndGggPSBmaXJzdEtleUJ0Lmxlbmd0aDsKIH0KIGlmKHNlY29uZEtleSAhPSBudWxsICYmIHNlY29uZEtleSAhPSAiIil7CiAgIHNlY29uZEtleUJ0ID0gZ2V0S2V5Qnl0ZXMoc2Vjb25kS2V5KTsKICAgc2Vjb25kTGVuZ3RoID0gc2Vjb25kS2V5QnQubGVuZ3RoOwogfQogaWYodGhpcmRLZXkgIT0gbnVsbCAmJiB0aGlyZEtleSAhPSAiIil7CiAgIHRoaXJkS2V5QnQgPSBnZXRLZXlCeXRlcyh0aGlyZEtleSk7CiAgIHRoaXJkTGVuZ3RoID0gdGhpcmRLZXlCdC5sZW5ndGg7CiB9ICAKIAogaWYobGVuZyA+IDApewogICBpZihsZW5nIDwgNCl7CiAgICAgdmFyIGJ0ID0gc3RyVG9CdChkYXRhKTsgICAgICAKICAgICB2YXIgZW5jQnl0ZSA7CiAgICAgaWYoZmlyc3RLZXkgIT0gbnVsbCAmJiBmaXJzdEtleSAhPSIiICYmIHNlY29uZEtleSAhPSBudWxsICYmIHNlY29uZEtleSAhPSAiIiAmJiB0aGlyZEtleSAhPSBudWxsICYmIHRoaXJkS2V5ICE9ICIiKXsKICAgICAgIHZhciB0ZW1wQnQ7CiAgICAgICB2YXIgeCx5LHo7CiAgICAgICB0ZW1wQnQgPSBidDsgICAgICAgIAogICAgICAgZm9yKHggPSAwO3ggPCBmaXJzdExlbmd0aCA7eCArKyl7CiAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsZmlyc3RLZXlCdFt4XSk7CiAgICAgICB9CiAgICAgICBmb3IoeSA9IDA7eSA8IHNlY29uZExlbmd0aCA7eSArKyl7CiAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsc2Vjb25kS2V5QnRbeV0pOwogICAgICAgfQogICAgICAgZm9yKHogPSAwO3ogPCB0aGlyZExlbmd0aCA7eiArKyl7CiAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsdGhpcmRLZXlCdFt6XSk7CiAgICAgICB9ICAgICAgICAKICAgICAgIGVuY0J5dGUgPSB0ZW1wQnQ7ICAgICAgICAKICAgICB9ZWxzZXsKICAgICAgIGlmKGZpcnN0S2V5ICE9IG51bGwgJiYgZmlyc3RLZXkgIT0iIiAmJiBzZWNvbmRLZXkgIT0gbnVsbCAmJiBzZWNvbmRLZXkgIT0gIiIpewogICAgICAgICB2YXIgdGVtcEJ0OwogICAgICAgICB2YXIgeCx5OwogICAgICAgICB0ZW1wQnQgPSBidDsKICAgICAgICAgZm9yKHggPSAwO3ggPCBmaXJzdExlbmd0aCA7eCArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxmaXJzdEtleUJ0W3hdKTsKICAgICAgICAgfQogICAgICAgICBmb3IoeSA9IDA7eSA8IHNlY29uZExlbmd0aCA7eSArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxzZWNvbmRLZXlCdFt5XSk7CiAgICAgICAgIH0KICAgICAgICAgZW5jQnl0ZSA9IHRlbXBCdDsKICAgICAgIH1lbHNlewogICAgICAgICBpZihmaXJzdEtleSAhPSBudWxsICYmIGZpcnN0S2V5ICE9IiIpeyAgICAgICAgICAgIAogICAgICAgICAgIHZhciB0ZW1wQnQ7CiAgICAgICAgICAgdmFyIHggPSAwOwogICAgICAgICAgIHRlbXBCdCA9IGJ0OyAgICAgICAgICAgIAogICAgICAgICAgIGZvcih4ID0gMDt4IDwgZmlyc3RMZW5ndGggO3ggKyspewogICAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxmaXJzdEtleUJ0W3hdKTsKICAgICAgICAgICB9CiAgICAgICAgICAgZW5jQnl0ZSA9IHRlbXBCdDsKICAgICAgICAgfQogICAgICAgfSAgICAgICAgCiAgICAgfQogICAgIGVuY0RhdGEgPSBidDY0VG9IZXgoZW5jQnl0ZSk7CiAgIH1lbHNlewogICAgIHZhciBpdGVyYXRvciA9IHBhcnNlSW50KGxlbmcvNCk7CiAgICAgdmFyIHJlbWFpbmRlciA9IGxlbmclNDsKICAgICB2YXIgaT0wOyAgICAgIAogICAgIGZvcihpID0gMDtpIDwgaXRlcmF0b3I7aSsrKXsKICAgICAgIHZhciB0ZW1wRGF0YSA9IGRhdGEuc3Vic3RyaW5nKGkqNCswLGkqNCs0KTsKICAgICAgIHZhciB0ZW1wQnl0ZSA9IHN0clRvQnQodGVtcERhdGEpOwogICAgICAgdmFyIGVuY0J5dGUgOwogICAgICAgaWYoZmlyc3RLZXkgIT0gbnVsbCAmJiBmaXJzdEtleSAhPSIiICYmIHNlY29uZEtleSAhPSBudWxsICYmIHNlY29uZEtleSAhPSAiIiAmJiB0aGlyZEtleSAhPSBudWxsICYmIHRoaXJkS2V5ICE9ICIiKXsKICAgICAgICAgdmFyIHRlbXBCdDsKICAgICAgICAgdmFyIHgseSx6OwogICAgICAgICB0ZW1wQnQgPSB0ZW1wQnl0ZTsKICAgICAgICAgZm9yKHggPSAwO3ggPCBmaXJzdExlbmd0aCA7eCArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxmaXJzdEtleUJ0W3hdKTsKICAgICAgICAgfQogICAgICAgICBmb3IoeSA9IDA7eSA8IHNlY29uZExlbmd0aCA7eSArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxzZWNvbmRLZXlCdFt5XSk7CiAgICAgICAgIH0KICAgICAgICAgZm9yKHogPSAwO3ogPCB0aGlyZExlbmd0aCA7eiArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCx0aGlyZEtleUJ0W3pdKTsKICAgICAgICAgfQogICAgICAgICBlbmNCeXRlID0gdGVtcEJ0OwogICAgICAgfWVsc2V7CiAgICAgICAgIGlmKGZpcnN0S2V5ICE9IG51bGwgJiYgZmlyc3RLZXkgIT0iIiAmJiBzZWNvbmRLZXkgIT0gbnVsbCAmJiBzZWNvbmRLZXkgIT0gIiIpewogICAgICAgICAgIHZhciB0ZW1wQnQ7CiAgICAgICAgICAgdmFyIHgseTsKICAgICAgICAgICB0ZW1wQnQgPSB0ZW1wQnl0ZTsKICAgICAgICAgICBmb3IoeCA9IDA7eCA8IGZpcnN0TGVuZ3RoIDt4ICsrKXsKICAgICAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsZmlyc3RLZXlCdFt4XSk7CiAgICAgICAgICAgfQogICAgICAgICAgIGZvcih5ID0gMDt5IDwgc2Vjb25kTGVuZ3RoIDt5ICsrKXsKICAgICAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsc2Vjb25kS2V5QnRbeV0pOwogICAgICAgICAgIH0KICAgICAgICAgICBlbmNCeXRlID0gdGVtcEJ0OwogICAgICAgICB9ZWxzZXsKICAgICAgICAgICBpZihmaXJzdEtleSAhPSBudWxsICYmIGZpcnN0S2V5ICE9IiIpeyAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIHZhciB0ZW1wQnQ7CiAgICAgICAgICAgICB2YXIgeDsKICAgICAgICAgICAgIHRlbXBCdCA9IHRlbXBCeXRlOwogICAgICAgICAgICAgZm9yKHggPSAwO3ggPCBmaXJzdExlbmd0aCA7eCArKyl7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICB0ZW1wQnQgPSBlbmModGVtcEJ0LGZpcnN0S2V5QnRbeF0pOwogICAgICAgICAgICAgfQogICAgICAgICAgICAgZW5jQnl0ZSA9IHRlbXBCdDsgICAgICAgICAgICAgIAogICAgICAgICAgIH0KICAgICAgICAgfQogICAgICAgfQogICAgICAgZW5jRGF0YSArPSBidDY0VG9IZXgoZW5jQnl0ZSk7CiAgICAgfSAgICAgIAogICAgIGlmKHJlbWFpbmRlciA+IDApewogICAgICAgdmFyIHJlbWFpbmRlckRhdGEgPSBkYXRhLnN1YnN0cmluZyhpdGVyYXRvcio0KzAsbGVuZyk7CiAgICAgICB2YXIgdGVtcEJ5dGUgPSBzdHJUb0J0KHJlbWFpbmRlckRhdGEpOwogICAgICAgdmFyIGVuY0J5dGUgOwogICAgICAgaWYoZmlyc3RLZXkgIT0gbnVsbCAmJiBmaXJzdEtleSAhPSIiICYmIHNlY29uZEtleSAhPSBudWxsICYmIHNlY29uZEtleSAhPSAiIiAmJiB0aGlyZEtleSAhPSBudWxsICYmIHRoaXJkS2V5ICE9ICIiKXsKICAgICAgICAgdmFyIHRlbXBCdDsKICAgICAgICAgdmFyIHgseSx6OwogICAgICAgICB0ZW1wQnQgPSB0ZW1wQnl0ZTsKICAgICAgICAgZm9yKHggPSAwO3ggPCBmaXJzdExlbmd0aCA7eCArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxmaXJzdEtleUJ0W3hdKTsKICAgICAgICAgfQogICAgICAgICBmb3IoeSA9IDA7eSA8IHNlY29uZExlbmd0aCA7eSArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxzZWNvbmRLZXlCdFt5XSk7CiAgICAgICAgIH0KICAgICAgICAgZm9yKHogPSAwO3ogPCB0aGlyZExlbmd0aCA7eiArKyl7CiAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCx0aGlyZEtleUJ0W3pdKTsKICAgICAgICAgfQogICAgICAgICBlbmNCeXRlID0gdGVtcEJ0OwogICAgICAgfWVsc2V7CiAgICAgICAgIGlmKGZpcnN0S2V5ICE9IG51bGwgJiYgZmlyc3RLZXkgIT0iIiAmJiBzZWNvbmRLZXkgIT0gbnVsbCAmJiBzZWNvbmRLZXkgIT0gIiIpewogICAgICAgICAgIHZhciB0ZW1wQnQ7CiAgICAgICAgICAgdmFyIHgseTsKICAgICAgICAgICB0ZW1wQnQgPSB0ZW1wQnl0ZTsKICAgICAgICAgICBmb3IoeCA9IDA7eCA8IGZpcnN0TGVuZ3RoIDt4ICsrKXsKICAgICAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsZmlyc3RLZXlCdFt4XSk7CiAgICAgICAgICAgfQogICAgICAgICAgIGZvcih5ID0gMDt5IDwgc2Vjb25kTGVuZ3RoIDt5ICsrKXsKICAgICAgICAgICAgIHRlbXBCdCA9IGVuYyh0ZW1wQnQsc2Vjb25kS2V5QnRbeV0pOwogICAgICAgICAgIH0KICAgICAgICAgICBlbmNCeXRlID0gdGVtcEJ0OwogICAgICAgICB9ZWxzZXsKICAgICAgICAgICBpZihmaXJzdEtleSAhPSBudWxsICYmIGZpcnN0S2V5ICE9IiIpeyAgICAgICAgICAgIAogICAgICAgICAgICAgdmFyIHRlbXBCdDsKICAgICAgICAgICAgIHZhciB4OwogICAgICAgICAgICAgdGVtcEJ0ID0gdGVtcEJ5dGU7CiAgICAgICAgICAgICBmb3IoeCA9IDA7eCA8IGZpcnN0TGVuZ3RoIDt4ICsrKXsKICAgICAgICAgICAgICAgdGVtcEJ0ID0gZW5jKHRlbXBCdCxmaXJzdEtleUJ0W3hdKTsKICAgICAgICAgICAgIH0KICAgICAgICAgICAgIGVuY0J5dGUgPSB0ZW1wQnQ7CiAgICAgICAgICAgfQogICAgICAgICB9CiAgICAgICB9CiAgICAgICBlbmNEYXRhICs9IGJ0NjRUb0hleChlbmNCeXRlKTsKICAgICB9ICAgICAgICAgICAgICAgIAogICB9CiB9CiByZXR1cm4gZW5jRGF0YTsKfQoKLyoKKiBkZWNyeXB0IHRoZSBlbmNyeXB0ZWQgc3RyaW5nIHRvIHRoZSBvcmlnaW5hbCBzdHJpbmcgCioKKiByZXR1cm4gIHRoZSBvcmlnaW5hbCBzdHJpbmcgIAoqLwpmdW5jdGlvbiBzdHJEZWMoZGF0YSxmaXJzdEtleSxzZWNvbmRLZXksdGhpcmRLZXkpewogdmFyIGxlbmcgPSBkYXRhLmxlbmd0aDsKIHZhciBkZWNTdHIgPSAiIjsKIHZhciBmaXJzdEtleUJ0LHNlY29uZEtleUJ0LHRoaXJkS2V5QnQsZmlyc3RMZW5ndGgsc2Vjb25kTGVuZ3RoLHRoaXJkTGVuZ3RoOwogaWYoZmlyc3RLZXkgIT0gbnVsbCAmJiBmaXJzdEtleSAhPSAiIil7ICAgIAogICBmaXJzdEtleUJ0ID0gZ2V0S2V5Qnl0ZXMoZmlyc3RLZXkpOwogICBmaXJzdExlbmd0aCA9IGZpcnN0S2V5QnQubGVuZ3RoOwogfQogaWYoc2Vjb25kS2V5ICE9IG51bGwgJiYgc2Vjb25kS2V5ICE9ICIiKXsKICAgc2Vjb25kS2V5QnQgPSBnZXRLZXlCeXRlcyhzZWNvbmRLZXkpOwogICBzZWNvbmRMZW5ndGggPSBzZWNvbmRLZXlCdC5sZW5ndGg7CiB9CiBpZih0aGlyZEtleSAhPSBudWxsICYmIHRoaXJkS2V5ICE9ICIiKXsKICAgdGhpcmRLZXlCdCA9IGdldEtleUJ5dGVzKHRoaXJkS2V5KTsKICAgdGhpcmRMZW5ndGggPSB0aGlyZEtleUJ0Lmxlbmd0aDsKIH0KIAogdmFyIGl0ZXJhdG9yID0gcGFyc2VJbnQobGVuZy8xNik7CiB2YXIgaT0wOyAgCiBmb3IoaSA9IDA7aSA8IGl0ZXJhdG9yO2krKyl7CiAgIHZhciB0ZW1wRGF0YSA9IGRhdGEuc3Vic3RyaW5nKGkqMTYrMCxpKjE2KzE2KTsgICAgCiAgIHZhciBzdHJCeXRlID0gaGV4VG9CdDY0KHRlbXBEYXRhKTsgICAgCiAgIHZhciBpbnRCeXRlID0gbmV3IEFycmF5KDY0KTsKICAgdmFyIGogPSAwOwogICBmb3IoaiA9IDA7aiA8IDY0OyBqKyspewogICAgIGludEJ5dGVbal0gPSBwYXJzZUludChzdHJCeXRlLnN1YnN0cmluZyhqLGorMSkpOwogICB9ICAgIAogICB2YXIgZGVjQnl0ZTsKICAgaWYoZmlyc3RLZXkgIT0gbnVsbCAmJiBmaXJzdEtleSAhPSIiICYmIHNlY29uZEtleSAhPSBudWxsICYmIHNlY29uZEtleSAhPSAiIiAmJiB0aGlyZEtleSAhPSBudWxsICYmIHRoaXJkS2V5ICE9ICIiKXsKICAgICB2YXIgdGVtcEJ0OwogICAgIHZhciB4LHksejsKICAgICB0ZW1wQnQgPSBpbnRCeXRlOwogICAgIGZvcih4ID0gdGhpcmRMZW5ndGggLSAxO3ggPj0gMDt4IC0tKXsKICAgICAgIHRlbXBCdCA9IGRlYyh0ZW1wQnQsdGhpcmRLZXlCdFt4XSk7CiAgICAgfQogICAgIGZvcih5ID0gc2Vjb25kTGVuZ3RoIC0gMTt5ID49IDA7eSAtLSl7CiAgICAgICB0ZW1wQnQgPSBkZWModGVtcEJ0LHNlY29uZEtleUJ0W3ldKTsKICAgICB9CiAgICAgZm9yKHogPSBmaXJzdExlbmd0aCAtIDE7eiA+PSAwIDt6IC0tKXsKICAgICAgIHRlbXBCdCA9IGRlYyh0ZW1wQnQsZmlyc3RLZXlCdFt6XSk7CiAgICAgfQogICAgIGRlY0J5dGUgPSB0ZW1wQnQ7CiAgIH1lbHNlewogICAgIGlmKGZpcnN0S2V5ICE9IG51bGwgJiYgZmlyc3RLZXkgIT0iIiAmJiBzZWNvbmRLZXkgIT0gbnVsbCAmJiBzZWNvbmRLZXkgIT0gIiIpewogICAgICAgdmFyIHRlbXBCdDsKICAgICAgIHZhciB4LHksejsKICAgICAgIHRlbXBCdCA9IGludEJ5dGU7CiAgICAgICBmb3IoeCA9IHNlY29uZExlbmd0aCAtIDE7eCA+PSAwIDt4IC0tKXsKICAgICAgICAgdGVtcEJ0ID0gZGVjKHRlbXBCdCxzZWNvbmRLZXlCdFt4XSk7CiAgICAgICB9CiAgICAgICBmb3IoeSA9IGZpcnN0TGVuZ3RoIC0gMTt5ID49IDAgO3kgLS0pewogICAgICAgICB0ZW1wQnQgPSBkZWModGVtcEJ0LGZpcnN0S2V5QnRbeV0pOwogICAgICAgfQogICAgICAgZGVjQnl0ZSA9IHRlbXBCdDsKICAgICB9ZWxzZXsKICAgICAgIGlmKGZpcnN0S2V5ICE9IG51bGwgJiYgZmlyc3RLZXkgIT0iIil7CiAgICAgICAgIHZhciB0ZW1wQnQ7CiAgICAgICAgIHZhciB4LHksejsKICAgICAgICAgdGVtcEJ0ID0gaW50Qnl0ZTsKICAgICAgICAgZm9yKHggPSBmaXJzdExlbmd0aCAtIDE7eCA+PSAwIDt4IC0tKXsKICAgICAgICAgICB0ZW1wQnQgPSBkZWModGVtcEJ0LGZpcnN0S2V5QnRbeF0pOwogICAgICAgICB9CiAgICAgICAgIGRlY0J5dGUgPSB0ZW1wQnQ7CiAgICAgICB9CiAgICAgfQogICB9CiAgIGRlY1N0ciArPSBieXRlVG9TdHJpbmcoZGVjQnl0ZSk7CiB9ICAgICAgCiByZXR1cm4gZGVjU3RyOwp9Ci8qCiogY2hhbmcgdGhlIHN0cmluZyBpbnRvIHRoZSBiaXQgYXJyYXkKKiAKKiByZXR1cm4gYml0IGFycmF5KGl0J3MgbGVuZ3RoICUgNjQgPSAwKQoqLwpmdW5jdGlvbiBnZXRLZXlCeXRlcyhrZXkpewogdmFyIGtleUJ5dGVzID0gbmV3IEFycmF5KCk7CiB2YXIgbGVuZyA9IGtleS5sZW5ndGg7CiB2YXIgaXRlcmF0b3IgPSBwYXJzZUludChsZW5nLzQpOwogdmFyIHJlbWFpbmRlciA9IGxlbmclNDsKIHZhciBpID0gMDsKIGZvcihpID0gMDtpIDwgaXRlcmF0b3I7IGkgKyspewogICBrZXlCeXRlc1tpXSA9IHN0clRvQnQoa2V5LnN1YnN0cmluZyhpKjQrMCxpKjQrNCkpOwogfQogaWYocmVtYWluZGVyID4gMCl7CiAgIGtleUJ5dGVzW2ldID0gc3RyVG9CdChrZXkuc3Vic3RyaW5nKGkqNCswLGxlbmcpKTsKIH0gICAgCiByZXR1cm4ga2V5Qnl0ZXM7Cn0KCi8qCiogY2hhbmcgdGhlIHN0cmluZyhpdCdzIGxlbmd0aCA8PSA0KSBpbnRvIHRoZSBiaXQgYXJyYXkKKiAKKiByZXR1cm4gYml0IGFycmF5KGl0J3MgbGVuZ3RoID0gNjQpCiovCmZ1bmN0aW9uIHN0clRvQnQoc3RyKXsgIAogdmFyIGxlbmcgPSBzdHIubGVuZ3RoOwogdmFyIGJ0ID0gbmV3IEFycmF5KDY0KTsKIGlmKGxlbmcgPCA0KXsKICAgdmFyIGk9MCxqPTAscD0wLHE9MDsKICAgZm9yKGkgPSAwO2k8bGVuZztpKyspewogICAgIHZhciBrID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICAgZm9yKGo9MDtqPDE2O2orKyl7ICAgICAgCiAgICAgICB2YXIgcG93PTEsbT0wOwogICAgICAgZm9yKG09MTU7bT5qO20tLSl7CiAgICAgICAgIHBvdyAqPSAyOwogICAgICAgfSAgICAgICAgCiAgICAgICBidFsxNippK2pdPXBhcnNlSW50KGsvcG93KSUyOwogICAgIH0KICAgfQogICBmb3IocCA9IGxlbmc7cDw0O3ArKyl7CiAgICAgdmFyIGsgPSAwOwogICAgIGZvcihxPTA7cTwxNjtxKyspeyAgICAgIAogICAgICAgdmFyIHBvdz0xLG09MDsKICAgICAgIGZvcihtPTE1O20+cTttLS0pewogICAgICAgICBwb3cgKj0gMjsKICAgICAgIH0gICAgICAgIAogICAgICAgYnRbMTYqcCtxXT1wYXJzZUludChrL3BvdyklMjsKICAgICB9CiAgIH0gIAogfWVsc2V7CiAgIGZvcihpID0gMDtpPDQ7aSsrKXsKICAgICB2YXIgayA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgIGZvcihqPTA7ajwxNjtqKyspeyAgICAgIAogICAgICAgdmFyIHBvdz0xOwogICAgICAgZm9yKG09MTU7bT5qO20tLSl7CiAgICAgICAgIHBvdyAqPSAyOwogICAgICAgfSAgICAgICAgCiAgICAgICBidFsxNippK2pdPXBhcnNlSW50KGsvcG93KSUyOwogICAgIH0KICAgfSAgCiB9CiByZXR1cm4gYnQ7Cn0KCi8qCiogY2hhbmcgdGhlIGJpdChpdCdzIGxlbmd0aCA9IDQpIGludG8gdGhlIGhleAoqIAoqIHJldHVybiBoZXgKKi8KZnVuY3Rpb24gYnQ0VG9IZXgoYmluYXJ5KSB7CiB2YXIgaGV4Owogc3dpdGNoIChiaW5hcnkpIHsKICAgY2FzZSAiMDAwMCIgOiBoZXggPSAiMCI7IGJyZWFrOwogICBjYXNlICIwMDAxIiA6IGhleCA9ICIxIjsgYnJlYWs7CiAgIGNhc2UgIjAwMTAiIDogaGV4ID0gIjIiOyBicmVhazsKICAgY2FzZSAiMDAxMSIgOiBoZXggPSAiMyI7IGJyZWFrOwogICBjYXNlICIwMTAwIiA6IGhleCA9ICI0IjsgYnJlYWs7CiAgIGNhc2UgIjAxMDEiIDogaGV4ID0gIjUiOyBicmVhazsKICAgY2FzZSAiMDExMCIgOiBoZXggPSAiNiI7IGJyZWFrOwogICBjYXNlICIwMTExIiA6IGhleCA9ICI3IjsgYnJlYWs7CiAgIGNhc2UgIjEwMDAiIDogaGV4ID0gIjgiOyBicmVhazsKICAgY2FzZSAiMTAwMSIgOiBoZXggPSAiOSI7IGJyZWFrOwogICBjYXNlICIxMDEwIiA6IGhleCA9ICJBIjsgYnJlYWs7CiAgIGNhc2UgIjEwMTEiIDogaGV4ID0gIkIiOyBicmVhazsKICAgY2FzZSAiMTEwMCIgOiBoZXggPSAiQyI7IGJyZWFrOwogICBjYXNlICIxMTAxIiA6IGhleCA9ICJEIjsgYnJlYWs7CiAgIGNhc2UgIjExMTAiIDogaGV4ID0gIkUiOyBicmVhazsKICAgY2FzZSAiMTExMSIgOiBoZXggPSAiRiI7IGJyZWFrOwogfQogcmV0dXJuIGhleDsKfQoKLyoKKiBjaGFuZyB0aGUgaGV4IGludG8gdGhlIGJpdChpdCdzIGxlbmd0aCA9IDQpCiogCiogcmV0dXJuIHRoZSBiaXQoaXQncyBsZW5ndGggPSA0KQoqLwpmdW5jdGlvbiBoZXhUb0J0NChoZXgpIHsKIHZhciBiaW5hcnk7CiBzd2l0Y2ggKGhleCkgewogICBjYXNlICIwIiA6IGJpbmFyeSA9ICIwMDAwIjsgYnJlYWs7CiAgIGNhc2UgIjEiIDogYmluYXJ5ID0gIjAwMDEiOyBicmVhazsKICAgY2FzZSAiMiIgOiBiaW5hcnkgPSAiMDAxMCI7IGJyZWFrOwogICBjYXNlICIzIiA6IGJpbmFyeSA9ICIwMDExIjsgYnJlYWs7CiAgIGNhc2UgIjQiIDogYmluYXJ5ID0gIjAxMDAiOyBicmVhazsKICAgY2FzZSAiNSIgOiBiaW5hcnkgPSAiMDEwMSI7IGJyZWFrOwogICBjYXNlICI2IiA6IGJpbmFyeSA9ICIwMTEwIjsgYnJlYWs7CiAgIGNhc2UgIjciIDogYmluYXJ5ID0gIjAxMTEiOyBicmVhazsKICAgY2FzZSAiOCIgOiBiaW5hcnkgPSAiMTAwMCI7IGJyZWFrOwogICBjYXNlICI5IiA6IGJpbmFyeSA9ICIxMDAxIjsgYnJlYWs7CiAgIGNhc2UgIkEiIDogYmluYXJ5ID0gIjEwMTAiOyBicmVhazsKICAgY2FzZSAiQiIgOiBiaW5hcnkgPSAiMTAxMSI7IGJyZWFrOwogICBjYXNlICJDIiA6IGJpbmFyeSA9ICIxMTAwIjsgYnJlYWs7CiAgIGNhc2UgIkQiIDogYmluYXJ5ID0gIjExMDEiOyBicmVhazsKICAgY2FzZSAiRSIgOiBiaW5hcnkgPSAiMTExMCI7IGJyZWFrOwogICBjYXNlICJGIiA6IGJpbmFyeSA9ICIxMTExIjsgYnJlYWs7CiB9CiByZXR1cm4gYmluYXJ5Owp9CgovKgoqIGNoYW5nIHRoZSBiaXQoaXQncyBsZW5ndGggPSA2NCkgaW50byB0aGUgc3RyaW5nCiogCiogcmV0dXJuIHN0cmluZwoqLwpmdW5jdGlvbiBieXRlVG9TdHJpbmcoYnl0ZURhdGEpewogdmFyIHN0cj0iIjsKIGZvcihpID0gMDtpPDQ7aSsrKXsKICAgdmFyIGNvdW50PTA7CiAgIGZvcihqPTA7ajwxNjtqKyspeyAgICAgICAgCiAgICAgdmFyIHBvdz0xOwogICAgIGZvcihtPTE1O20+ajttLS0pewogICAgICAgcG93Kj0yOwogICAgIH0gICAgICAgICAgICAgIAogICAgIGNvdW50Kz1ieXRlRGF0YVsxNippK2pdKnBvdzsKICAgfSAgICAgICAgCiAgIGlmKGNvdW50ICE9IDApewogICAgIHN0cis9U3RyaW5nLmZyb21DaGFyQ29kZShjb3VudCk7CiAgIH0KIH0KIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIGJ0NjRUb0hleChieXRlRGF0YSl7CiB2YXIgaGV4ID0gIiI7CiBmb3IoaSA9IDA7aTwxNjtpKyspewogICB2YXIgYnQgPSAiIjsKICAgZm9yKGo9MDtqPDQ7aisrKXsgICAgCiAgICAgYnQgKz0gYnl0ZURhdGFbaSo0K2pdOwogICB9ICAgIAogICBoZXgrPWJ0NFRvSGV4KGJ0KTsKIH0KIHJldHVybiBoZXg7Cn0KCmZ1bmN0aW9uIGhleFRvQnQ2NChoZXgpewogdmFyIGJpbmFyeSA9ICIiOwogZm9yKGkgPSAwO2k8MTY7aSsrKXsKICAgYmluYXJ5Kz1oZXhUb0J0NChoZXguc3Vic3RyaW5nKGksaSsxKSk7CiB9CiByZXR1cm4gYmluYXJ5Owp9CgovKgoqIHRoZSA2NCBiaXQgZGVzIGNvcmUgYXJpdGhtZXRpYwoqLwoKZnVuY3Rpb24gZW5jKGRhdGFCeXRlLGtleUJ5dGUpeyAgCiB2YXIga2V5cyA9IGdlbmVyYXRlS2V5cyhrZXlCeXRlKTsgICAgCiB2YXIgaXBCeXRlICAgPSBpbml0UGVybXV0ZShkYXRhQnl0ZSk7ICAKIHZhciBpcExlZnQgICA9IG5ldyBBcnJheSgzMik7CiB2YXIgaXBSaWdodCAgPSBuZXcgQXJyYXkoMzIpOwogdmFyIHRlbXBMZWZ0ID0gbmV3IEFycmF5KDMyKTsKIHZhciBpID0gMCxqID0gMCxrID0gMCxtID0gMCwgbiA9IDA7CiBmb3IoayA9IDA7ayA8IDMyO2sgKyspewogICBpcExlZnRba10gPSBpcEJ5dGVba107CiAgIGlwUmlnaHRba10gPSBpcEJ5dGVbMzIra107CiB9ICAgIAogZm9yKGkgPSAwO2kgPCAxNjtpICsrKXsKICAgZm9yKGogPSAwO2ogPCAzMjtqICsrKXsKICAgICB0ZW1wTGVmdFtqXSA9IGlwTGVmdFtqXTsKICAgICBpcExlZnRbal0gPSBpcFJpZ2h0W2pdOyAgICAgIAogICB9ICAKICAgdmFyIGtleSA9IG5ldyBBcnJheSg0OCk7CiAgIGZvcihtID0gMDttIDwgNDg7bSArKyl7CiAgICAga2V5W21dID0ga2V5c1tpXVttXTsKICAgfQogICB2YXIgIHRlbXBSaWdodCA9IHhvcihwUGVybXV0ZShzQm94UGVybXV0ZSh4b3IoZXhwYW5kUGVybXV0ZShpcFJpZ2h0KSxrZXkpKSksIHRlbXBMZWZ0KTsgICAgICAKICAgZm9yKG4gPSAwO24gPCAzMjtuICsrKXsKICAgICBpcFJpZ2h0W25dID0gdGVtcFJpZ2h0W25dOwogICB9ICAKICAgCiB9ICAKIAogCiB2YXIgZmluYWxEYXRhID1uZXcgQXJyYXkoNjQpOwogZm9yKGkgPSAwO2kgPCAzMjtpICsrKXsKICAgZmluYWxEYXRhW2ldID0gaXBSaWdodFtpXTsKICAgZmluYWxEYXRhWzMyK2ldID0gaXBMZWZ0W2ldOwogfQogcmV0dXJuIGZpbmFsbHlQZXJtdXRlKGZpbmFsRGF0YSk7ICAKfQoKZnVuY3Rpb24gZGVjKGRhdGFCeXRlLGtleUJ5dGUpeyAgCiB2YXIga2V5cyA9IGdlbmVyYXRlS2V5cyhrZXlCeXRlKTsgICAgCiB2YXIgaXBCeXRlICAgPSBpbml0UGVybXV0ZShkYXRhQnl0ZSk7ICAKIHZhciBpcExlZnQgICA9IG5ldyBBcnJheSgzMik7CiB2YXIgaXBSaWdodCAgPSBuZXcgQXJyYXkoMzIpOwogdmFyIHRlbXBMZWZ0ID0gbmV3IEFycmF5KDMyKTsKIHZhciBpID0gMCxqID0gMCxrID0gMCxtID0gMCwgbiA9IDA7CiBmb3IoayA9IDA7ayA8IDMyO2sgKyspewogICBpcExlZnRba10gPSBpcEJ5dGVba107CiAgIGlwUmlnaHRba10gPSBpcEJ5dGVbMzIra107CiB9ICAKIGZvcihpID0gMTU7aSA+PSAwO2kgLS0pewogICBmb3IoaiA9IDA7aiA8IDMyO2ogKyspewogICAgIHRlbXBMZWZ0W2pdID0gaXBMZWZ0W2pdOwogICAgIGlwTGVmdFtqXSA9IGlwUmlnaHRbal07ICAgICAgCiAgIH0gIAogICB2YXIga2V5ID0gbmV3IEFycmF5KDQ4KTsKICAgZm9yKG0gPSAwO20gPCA0ODttICsrKXsKICAgICBrZXlbbV0gPSBrZXlzW2ldW21dOwogICB9CiAgIAogICB2YXIgIHRlbXBSaWdodCA9IHhvcihwUGVybXV0ZShzQm94UGVybXV0ZSh4b3IoZXhwYW5kUGVybXV0ZShpcFJpZ2h0KSxrZXkpKSksIHRlbXBMZWZ0KTsgICAgICAKICAgZm9yKG4gPSAwO24gPCAzMjtuICsrKXsKICAgICBpcFJpZ2h0W25dID0gdGVtcFJpZ2h0W25dOwogICB9ICAKIH0gIAogCiAKIHZhciBmaW5hbERhdGEgPW5ldyBBcnJheSg2NCk7CiBmb3IoaSA9IDA7aSA8IDMyO2kgKyspewogICBmaW5hbERhdGFbaV0gPSBpcFJpZ2h0W2ldOwogICBmaW5hbERhdGFbMzIraV0gPSBpcExlZnRbaV07CiB9CiByZXR1cm4gZmluYWxseVBlcm11dGUoZmluYWxEYXRhKTsgIAp9CgpmdW5jdGlvbiBpbml0UGVybXV0ZShvcmlnaW5hbERhdGEpewogdmFyIGlwQnl0ZSA9IG5ldyBBcnJheSg2NCk7CiBmb3IgKGkgPSAwLCBtID0gMSwgbiA9IDA7IGkgPCA0OyBpKyssIG0gKz0gMiwgbiArPSAyKSB7CiAgIGZvciAoaiA9IDcsIGsgPSAwOyBqID49IDA7IGotLSwgaysrKSB7CiAgICAgaXBCeXRlW2kgKiA4ICsga10gPSBvcmlnaW5hbERhdGFbaiAqIDggKyBtXTsKICAgICBpcEJ5dGVbaSAqIDggKyBrICsgMzJdID0gb3JpZ2luYWxEYXRhW2ogKiA4ICsgbl07CiAgIH0KIH0gICAgCiByZXR1cm4gaXBCeXRlOwp9CgpmdW5jdGlvbiBleHBhbmRQZXJtdXRlKHJpZ2h0RGF0YSl7ICAKIHZhciBlcEJ5dGUgPSBuZXcgQXJyYXkoNDgpOwogZm9yIChpID0gMDsgaSA8IDg7IGkrKykgewogICBpZiAoaSA9PSAwKSB7CiAgICAgZXBCeXRlW2kgKiA2ICsgMF0gPSByaWdodERhdGFbMzFdOwogICB9IGVsc2UgewogICAgIGVwQnl0ZVtpICogNiArIDBdID0gcmlnaHREYXRhW2kgKiA0IC0gMV07CiAgIH0KICAgZXBCeXRlW2kgKiA2ICsgMV0gPSByaWdodERhdGFbaSAqIDQgKyAwXTsKICAgZXBCeXRlW2kgKiA2ICsgMl0gPSByaWdodERhdGFbaSAqIDQgKyAxXTsKICAgZXBCeXRlW2kgKiA2ICsgM10gPSByaWdodERhdGFbaSAqIDQgKyAyXTsKICAgZXBCeXRlW2kgKiA2ICsgNF0gPSByaWdodERhdGFbaSAqIDQgKyAzXTsKICAgaWYgKGkgPT0gNykgewogICAgIGVwQnl0ZVtpICogNiArIDVdID0gcmlnaHREYXRhWzBdOwogICB9IGVsc2UgewogICAgIGVwQnl0ZVtpICogNiArIDVdID0gcmlnaHREYXRhW2kgKiA0ICsgNF07CiAgIH0KIH0gICAgICAKIHJldHVybiBlcEJ5dGU7Cn0KCmZ1bmN0aW9uIHhvcihieXRlT25lLGJ5dGVUd28peyAgCiB2YXIgeG9yQnl0ZSA9IG5ldyBBcnJheShieXRlT25lLmxlbmd0aCk7CiBmb3IoaSA9IDA7aSA8IGJ5dGVPbmUubGVuZ3RoOyBpICsrKXsgICAgICAKICAgeG9yQnl0ZVtpXSA9IGJ5dGVPbmVbaV0gXiBieXRlVHdvW2ldOwogfSAgCiByZXR1cm4geG9yQnl0ZTsKfQoKZnVuY3Rpb24gc0JveFBlcm11dGUoZXhwYW5kQnl0ZSl7CiAKICAgdmFyIHNCb3hCeXRlID0gbmV3IEFycmF5KDMyKTsKICAgdmFyIGJpbmFyeSA9ICIiOwogICB2YXIgczEgPSBbCiAgICAgICBbMTQsIDQsIDEzLCAxLCAyLCAxNSwgMTEsIDgsIDMsIDEwLCA2LCAxMiwgNSwgOSwgMCwgN10sCiAgICAgICBbMCwgMTUsIDcsIDQsIDE0LCAyLCAxMywgMSwgMTAsIDYsIDEyLCAxMSwgOSwgNSwgMywgOF0sCiAgICAgICBbNCwgMSwgMTQsIDgsIDEzLCA2LCAyLCAxMSwgMTUsIDEyLCA5LCA3LCAzLCAxMCwgNSwgMF0sCiAgICAgICBbMTUsIDEyLCA4LCAyLCA0LCA5LCAxLCA3LCA1LCAxMSwgMywgMTQsIDEwLCAwLCA2LCAxMyBdXTsKCiAgICAgICAvKiBUYWJsZSAtIHMyICovCiAgIHZhciBzMiA9IFsKICAgICAgIFsxNSwgMSwgOCwgMTQsIDYsIDExLCAzLCA0LCA5LCA3LCAyLCAxMywgMTIsIDAsIDUsIDEwXSwKICAgICAgIFszLCAxMywgNCwgNywgMTUsIDIsIDgsIDE0LCAxMiwgMCwgMSwgMTAsIDYsIDksIDExLCA1XSwKICAgICAgIFswLCAxNCwgNywgMTEsIDEwLCA0LCAxMywgMSwgNSwgOCwgMTIsIDYsIDksIDMsIDIsIDE1XSwKICAgICAgIFsxMywgOCwgMTAsIDEsIDMsIDE1LCA0LCAyLCAxMSwgNiwgNywgMTIsIDAsIDUsIDE0LCA5IF1dOwoKICAgICAgIC8qIFRhYmxlIC0gczMgKi8KICAgdmFyIHMzPSBbCiAgICAgICBbMTAsIDAsIDksIDE0LCA2LCAzLCAxNSwgNSwgMSwgMTMsIDEyLCA3LCAxMSwgNCwgMiwgOF0sCiAgICAgICBbMTMsIDcsIDAsIDksIDMsIDQsIDYsIDEwLCAyLCA4LCA1LCAxNCwgMTIsIDExLCAxNSwgMV0sCiAgICAgICBbMTMsIDYsIDQsIDksIDgsIDE1LCAzLCAwLCAxMSwgMSwgMiwgMTIsIDUsIDEwLCAxNCwgN10sCiAgICAgICBbMSwgMTAsIDEzLCAwLCA2LCA5LCA4LCA3LCA0LCAxNSwgMTQsIDMsIDExLCA1LCAyLCAxMiBdXTsKICAgICAgIC8qIFRhYmxlIC0gczQgKi8KICAgdmFyIHM0ID0gWwogICAgICAgWzcsIDEzLCAxNCwgMywgMCwgNiwgOSwgMTAsIDEsIDIsIDgsIDUsIDExLCAxMiwgNCwgMTVdLAogICAgICAgWzEzLCA4LCAxMSwgNSwgNiwgMTUsIDAsIDMsIDQsIDcsIDIsIDEyLCAxLCAxMCwgMTQsIDldLAogICAgICAgWzEwLCA2LCA5LCAwLCAxMiwgMTEsIDcsIDEzLCAxNSwgMSwgMywgMTQsIDUsIDIsIDgsIDRdLAogICAgICAgWzMsIDE1LCAwLCA2LCAxMCwgMSwgMTMsIDgsIDksIDQsIDUsIDExLCAxMiwgNywgMiwgMTQgXV07CgogICAgICAgLyogVGFibGUgLSBzNSAqLwogICB2YXIgczUgPSBbCiAgICAgICBbMiwgMTIsIDQsIDEsIDcsIDEwLCAxMSwgNiwgOCwgNSwgMywgMTUsIDEzLCAwLCAxNCwgOV0sCiAgICAgICBbMTQsIDExLCAyLCAxMiwgNCwgNywgMTMsIDEsIDUsIDAsIDE1LCAxMCwgMywgOSwgOCwgNl0sCiAgICAgICBbNCwgMiwgMSwgMTEsIDEwLCAxMywgNywgOCwgMTUsIDksIDEyLCA1LCA2LCAzLCAwLCAxNF0sCiAgICAgICBbMTEsIDgsIDEyLCA3LCAxLCAxNCwgMiwgMTMsIDYsIDE1LCAwLCA5LCAxMCwgNCwgNSwgMyBdXTsKCiAgICAgICAvKiBUYWJsZSAtIHM2ICovCiAgIHZhciBzNiA9IFsKICAgICAgIFsxMiwgMSwgMTAsIDE1LCA5LCAyLCA2LCA4LCAwLCAxMywgMywgNCwgMTQsIDcsIDUsIDExXSwKICAgICAgIFsxMCwgMTUsIDQsIDIsIDcsIDEyLCA5LCA1LCA2LCAxLCAxMywgMTQsIDAsIDExLCAzLCA4XSwKICAgICAgIFs5LCAxNCwgMTUsIDUsIDIsIDgsIDEyLCAzLCA3LCAwLCA0LCAxMCwgMSwgMTMsIDExLCA2XSwKICAgICAgIFs0LCAzLCAyLCAxMiwgOSwgNSwgMTUsIDEwLCAxMSwgMTQsIDEsIDcsIDYsIDAsIDgsIDEzIF1dOwoKICAgICAgIC8qIFRhYmxlIC0gczcgKi8KICAgdmFyIHM3ID0gWwogICAgICAgWzQsIDExLCAyLCAxNCwgMTUsIDAsIDgsIDEzLCAzLCAxMiwgOSwgNywgNSwgMTAsIDYsIDFdLAogICAgICAgWzEzLCAwLCAxMSwgNywgNCwgOSwgMSwgMTAsIDE0LCAzLCA1LCAxMiwgMiwgMTUsIDgsIDZdLAogICAgICAgWzEsIDQsIDExLCAxMywgMTIsIDMsIDcsIDE0LCAxMCwgMTUsIDYsIDgsIDAsIDUsIDksIDJdLAogICAgICAgWzYsIDExLCAxMywgOCwgMSwgNCwgMTAsIDcsIDksIDUsIDAsIDE1LCAxNCwgMiwgMywgMTJdXTsKCiAgICAgICAvKiBUYWJsZSAtIHM4ICovCiAgIHZhciBzOCA9IFsKICAgICAgIFsxMywgMiwgOCwgNCwgNiwgMTUsIDExLCAxLCAxMCwgOSwgMywgMTQsIDUsIDAsIDEyLCA3XSwKICAgICAgIFsxLCAxNSwgMTMsIDgsIDEwLCAzLCA3LCA0LCAxMiwgNSwgNiwgMTEsIDAsIDE0LCA5LCAyXSwKICAgICAgIFs3LCAxMSwgNCwgMSwgOSwgMTIsIDE0LCAyLCAwLCA2LCAxMCwgMTMsIDE1LCAzLCA1LCA4XSwKICAgICAgIFsyLCAxLCAxNCwgNywgNCwgMTAsIDgsIDEzLCAxNSwgMTIsIDksIDAsIDMsIDUsIDYsIDExXV07CiAgIAogICBmb3IobT0wO208ODttKyspewogICB2YXIgaT0wLGo9MDsKICAgaSA9IGV4cGFuZEJ5dGVbbSo2KzBdKjIrZXhwYW5kQnl0ZVttKjYrNV07CiAgIGogPSBleHBhbmRCeXRlW20gKiA2ICsgMV0gKiAyICogMiAqIDIgCiAgICAgKyBleHBhbmRCeXRlW20gKiA2ICsgMl0gKiAyKiAyIAogICAgICsgZXhwYW5kQnl0ZVttICogNiArIDNdICogMiAKICAgICArIGV4cGFuZEJ5dGVbbSAqIDYgKyA0XTsKICAgc3dpdGNoIChtKSB7CiAgICAgY2FzZSAwIDoKICAgICAgIGJpbmFyeSA9IGdldEJveEJpbmFyeShzMVtpXVtqXSk7CiAgICAgICBicmVhazsKICAgICBjYXNlIDEgOgogICAgICAgYmluYXJ5ID0gZ2V0Qm94QmluYXJ5KHMyW2ldW2pdKTsKICAgICAgIGJyZWFrOwogICAgIGNhc2UgMiA6CiAgICAgICBiaW5hcnkgPSBnZXRCb3hCaW5hcnkoczNbaV1bal0pOwogICAgICAgYnJlYWs7CiAgICAgY2FzZSAzIDoKICAgICAgIGJpbmFyeSA9IGdldEJveEJpbmFyeShzNFtpXVtqXSk7CiAgICAgICBicmVhazsKICAgICBjYXNlIDQgOgogICAgICAgYmluYXJ5ID0gZ2V0Qm94QmluYXJ5KHM1W2ldW2pdKTsKICAgICAgIGJyZWFrOwogICAgIGNhc2UgNSA6CiAgICAgICBiaW5hcnkgPSBnZXRCb3hCaW5hcnkoczZbaV1bal0pOwogICAgICAgYnJlYWs7CiAgICAgY2FzZSA2IDoKICAgICAgIGJpbmFyeSA9IGdldEJveEJpbmFyeShzN1tpXVtqXSk7CiAgICAgICBicmVhazsKICAgICBjYXNlIDcgOgogICAgICAgYmluYXJ5ID0gZ2V0Qm94QmluYXJ5KHM4W2ldW2pdKTsKICAgICAgIGJyZWFrOwogICB9ICAgICAgCiAgIHNCb3hCeXRlW20qNCswXSA9IHBhcnNlSW50KGJpbmFyeS5zdWJzdHJpbmcoMCwxKSk7CiAgIHNCb3hCeXRlW20qNCsxXSA9IHBhcnNlSW50KGJpbmFyeS5zdWJzdHJpbmcoMSwyKSk7CiAgIHNCb3hCeXRlW20qNCsyXSA9IHBhcnNlSW50KGJpbmFyeS5zdWJzdHJpbmcoMiwzKSk7CiAgIHNCb3hCeXRlW20qNCszXSA9IHBhcnNlSW50KGJpbmFyeS5zdWJzdHJpbmcoMyw0KSk7CiB9CiByZXR1cm4gc0JveEJ5dGU7Cn0KCmZ1bmN0aW9uIHBQZXJtdXRlKHNCb3hCeXRlKXsKIHZhciBwQm94UGVybXV0ZSA9IG5ldyBBcnJheSgzMik7CiBwQm94UGVybXV0ZVsgMF0gPSBzQm94Qnl0ZVsxNV07IAogcEJveFBlcm11dGVbIDFdID0gc0JveEJ5dGVbIDZdOyAKIHBCb3hQZXJtdXRlWyAyXSA9IHNCb3hCeXRlWzE5XTsgCiBwQm94UGVybXV0ZVsgM10gPSBzQm94Qnl0ZVsyMF07IAogcEJveFBlcm11dGVbIDRdID0gc0JveEJ5dGVbMjhdOyAKIHBCb3hQZXJtdXRlWyA1XSA9IHNCb3hCeXRlWzExXTsgCiBwQm94UGVybXV0ZVsgNl0gPSBzQm94Qnl0ZVsyN107IAogcEJveFBlcm11dGVbIDddID0gc0JveEJ5dGVbMTZdOyAKIHBCb3hQZXJtdXRlWyA4XSA9IHNCb3hCeXRlWyAwXTsgCiBwQm94UGVybXV0ZVsgOV0gPSBzQm94Qnl0ZVsxNF07IAogcEJveFBlcm11dGVbMTBdID0gc0JveEJ5dGVbMjJdOyAKIHBCb3hQZXJtdXRlWzExXSA9IHNCb3hCeXRlWzI1XTsgCiBwQm94UGVybXV0ZVsxMl0gPSBzQm94Qnl0ZVsgNF07IAogcEJveFBlcm11dGVbMTNdID0gc0JveEJ5dGVbMTddOyAKIHBCb3hQZXJtdXRlWzE0XSA9IHNCb3hCeXRlWzMwXTsgCiBwQm94UGVybXV0ZVsxNV0gPSBzQm94Qnl0ZVsgOV07IAogcEJveFBlcm11dGVbMTZdID0gc0JveEJ5dGVbIDFdOyAKIHBCb3hQZXJtdXRlWzE3XSA9IHNCb3hCeXRlWyA3XTsgCiBwQm94UGVybXV0ZVsxOF0gPSBzQm94Qnl0ZVsyM107IAogcEJveFBlcm11dGVbMTldID0gc0JveEJ5dGVbMTNdOyAKIHBCb3hQZXJtdXRlWzIwXSA9IHNCb3hCeXRlWzMxXTsgCiBwQm94UGVybXV0ZVsyMV0gPSBzQm94Qnl0ZVsyNl07IAogcEJveFBlcm11dGVbMjJdID0gc0JveEJ5dGVbIDJdOyAKIHBCb3hQZXJtdXRlWzIzXSA9IHNCb3hCeXRlWyA4XTsgCiBwQm94UGVybXV0ZVsyNF0gPSBzQm94Qnl0ZVsxOF07IAogcEJveFBlcm11dGVbMjVdID0gc0JveEJ5dGVbMTJdOyAKIHBCb3hQZXJtdXRlWzI2XSA9IHNCb3hCeXRlWzI5XTsgCiBwQm94UGVybXV0ZVsyN10gPSBzQm94Qnl0ZVsgNV07IAogcEJveFBlcm11dGVbMjhdID0gc0JveEJ5dGVbMjFdOyAKIHBCb3hQZXJtdXRlWzI5XSA9IHNCb3hCeXRlWzEwXTsgCiBwQm94UGVybXV0ZVszMF0gPSBzQm94Qnl0ZVsgM107IAogcEJveFBlcm11dGVbMzFdID0gc0JveEJ5dGVbMjRdOyAgICAKIHJldHVybiBwQm94UGVybXV0ZTsKfQoKZnVuY3Rpb24gZmluYWxseVBlcm11dGUoZW5kQnl0ZSl7ICAgIAogdmFyIGZwQnl0ZSA9IG5ldyBBcnJheSg2NCk7ICAKIGZwQnl0ZVsgMF0gPSBlbmRCeXRlWzM5XTsgCiBmcEJ5dGVbIDFdID0gZW5kQnl0ZVsgN107IAogZnBCeXRlWyAyXSA9IGVuZEJ5dGVbNDddOyAKIGZwQnl0ZVsgM10gPSBlbmRCeXRlWzE1XTsgCiBmcEJ5dGVbIDRdID0gZW5kQnl0ZVs1NV07IAogZnBCeXRlWyA1XSA9IGVuZEJ5dGVbMjNdOyAKIGZwQnl0ZVsgNl0gPSBlbmRCeXRlWzYzXTsgCiBmcEJ5dGVbIDddID0gZW5kQnl0ZVszMV07IAogZnBCeXRlWyA4XSA9IGVuZEJ5dGVbMzhdOyAKIGZwQnl0ZVsgOV0gPSBlbmRCeXRlWyA2XTsgCiBmcEJ5dGVbMTBdID0gZW5kQnl0ZVs0Nl07IAogZnBCeXRlWzExXSA9IGVuZEJ5dGVbMTRdOyAKIGZwQnl0ZVsxMl0gPSBlbmRCeXRlWzU0XTsgCiBmcEJ5dGVbMTNdID0gZW5kQnl0ZVsyMl07IAogZnBCeXRlWzE0XSA9IGVuZEJ5dGVbNjJdOyAKIGZwQnl0ZVsxNV0gPSBlbmRCeXRlWzMwXTsgCiBmcEJ5dGVbMTZdID0gZW5kQnl0ZVszN107IAogZnBCeXRlWzE3XSA9IGVuZEJ5dGVbIDVdOyAKIGZwQnl0ZVsxOF0gPSBlbmRCeXRlWzQ1XTsgCiBmcEJ5dGVbMTldID0gZW5kQnl0ZVsxM107IAogZnBCeXRlWzIwXSA9IGVuZEJ5dGVbNTNdOyAKIGZwQnl0ZVsyMV0gPSBlbmRCeXRlWzIxXTsgCiBmcEJ5dGVbMjJdID0gZW5kQnl0ZVs2MV07IAogZnBCeXRlWzIzXSA9IGVuZEJ5dGVbMjldOyAKIGZwQnl0ZVsyNF0gPSBlbmRCeXRlWzM2XTsgCiBmcEJ5dGVbMjVdID0gZW5kQnl0ZVsgNF07IAogZnBCeXRlWzI2XSA9IGVuZEJ5dGVbNDRdOyAKIGZwQnl0ZVsyN10gPSBlbmRCeXRlWzEyXTsgCiBmcEJ5dGVbMjhdID0gZW5kQnl0ZVs1Ml07IAogZnBCeXRlWzI5XSA9IGVuZEJ5dGVbMjBdOyAKIGZwQnl0ZVszMF0gPSBlbmRCeXRlWzYwXTsgCiBmcEJ5dGVbMzFdID0gZW5kQnl0ZVsyOF07IAogZnBCeXRlWzMyXSA9IGVuZEJ5dGVbMzVdOyAKIGZwQnl0ZVszM10gPSBlbmRCeXRlWyAzXTsgCiBmcEJ5dGVbMzRdID0gZW5kQnl0ZVs0M107IAogZnBCeXRlWzM1XSA9IGVuZEJ5dGVbMTFdOyAKIGZwQnl0ZVszNl0gPSBlbmRCeXRlWzUxXTsgCiBmcEJ5dGVbMzddID0gZW5kQnl0ZVsxOV07IAogZnBCeXRlWzM4XSA9IGVuZEJ5dGVbNTldOyAKIGZwQnl0ZVszOV0gPSBlbmRCeXRlWzI3XTsgCiBmcEJ5dGVbNDBdID0gZW5kQnl0ZVszNF07IAogZnBCeXRlWzQxXSA9IGVuZEJ5dGVbIDJdOyAKIGZwQnl0ZVs0Ml0gPSBlbmRCeXRlWzQyXTsgCiBmcEJ5dGVbNDNdID0gZW5kQnl0ZVsxMF07IAogZnBCeXRlWzQ0XSA9IGVuZEJ5dGVbNTBdOyAKIGZwQnl0ZVs0NV0gPSBlbmRCeXRlWzE4XTsgCiBmcEJ5dGVbNDZdID0gZW5kQnl0ZVs1OF07IAogZnBCeXRlWzQ3XSA9IGVuZEJ5dGVbMjZdOyAKIGZwQnl0ZVs0OF0gPSBlbmRCeXRlWzMzXTsgCiBmcEJ5dGVbNDldID0gZW5kQnl0ZVsgMV07IAogZnBCeXRlWzUwXSA9IGVuZEJ5dGVbNDFdOyAKIGZwQnl0ZVs1MV0gPSBlbmRCeXRlWyA5XTsgCiBmcEJ5dGVbNTJdID0gZW5kQnl0ZVs0OV07IAogZnBCeXRlWzUzXSA9IGVuZEJ5dGVbMTddOyAKIGZwQnl0ZVs1NF0gPSBlbmRCeXRlWzU3XTsgCiBmcEJ5dGVbNTVdID0gZW5kQnl0ZVsyNV07IAogZnBCeXRlWzU2XSA9IGVuZEJ5dGVbMzJdOyAKIGZwQnl0ZVs1N10gPSBlbmRCeXRlWyAwXTsgCiBmcEJ5dGVbNThdID0gZW5kQnl0ZVs0MF07IAogZnBCeXRlWzU5XSA9IGVuZEJ5dGVbIDhdOyAKIGZwQnl0ZVs2MF0gPSBlbmRCeXRlWzQ4XTsgCiBmcEJ5dGVbNjFdID0gZW5kQnl0ZVsxNl07IAogZnBCeXRlWzYyXSA9IGVuZEJ5dGVbNTZdOyAKIGZwQnl0ZVs2M10gPSBlbmRCeXRlWzI0XTsKIHJldHVybiBmcEJ5dGU7Cn0KCmZ1bmN0aW9uIGdldEJveEJpbmFyeShpKSB7CiB2YXIgYmluYXJ5ID0gIiI7CiBzd2l0Y2ggKGkpIHsKICAgY2FzZSAwIDpiaW5hcnkgPSAiMDAwMCI7YnJlYWs7CiAgIGNhc2UgMSA6YmluYXJ5ID0gIjAwMDEiO2JyZWFrOwogICBjYXNlIDIgOmJpbmFyeSA9ICIwMDEwIjticmVhazsKICAgY2FzZSAzIDpiaW5hcnkgPSAiMDAxMSI7YnJlYWs7CiAgIGNhc2UgNCA6YmluYXJ5ID0gIjAxMDAiO2JyZWFrOwogICBjYXNlIDUgOmJpbmFyeSA9ICIwMTAxIjticmVhazsKICAgY2FzZSA2IDpiaW5hcnkgPSAiMDExMCI7YnJlYWs7CiAgIGNhc2UgNyA6YmluYXJ5ID0gIjAxMTEiO2JyZWFrOwogICBjYXNlIDggOmJpbmFyeSA9ICIxMDAwIjticmVhazsKICAgY2FzZSA5IDpiaW5hcnkgPSAiMTAwMSI7YnJlYWs7CiAgIGNhc2UgMTAgOmJpbmFyeSA9ICIxMDEwIjticmVhazsKICAgY2FzZSAxMSA6YmluYXJ5ID0gIjEwMTEiO2JyZWFrOwogICBjYXNlIDEyIDpiaW5hcnkgPSAiMTEwMCI7YnJlYWs7CiAgIGNhc2UgMTMgOmJpbmFyeSA9ICIxMTAxIjticmVhazsKICAgY2FzZSAxNCA6YmluYXJ5ID0gIjExMTAiO2JyZWFrOwogICBjYXNlIDE1IDpiaW5hcnkgPSAiMTExMSI7YnJlYWs7CiB9CiByZXR1cm4gYmluYXJ5Owp9Ci8qCiogZ2VuZXJhdGUgMTYga2V5cyBmb3IgeG9yCioKKi8KZnVuY3Rpb24gZ2VuZXJhdGVLZXlzKGtleUJ5dGUpeyAgICAKIHZhciBrZXkgICA9IG5ldyBBcnJheSg1Nik7CiB2YXIga2V5cyA9IG5ldyBBcnJheSgpOyAgCiAKIGtleXNbIDBdID0gbmV3IEFycmF5KCk7CiBrZXlzWyAxXSA9IG5ldyBBcnJheSgpOwoga2V5c1sgMl0gPSBuZXcgQXJyYXkoKTsKIGtleXNbIDNdID0gbmV3IEFycmF5KCk7CiBrZXlzWyA0XSA9IG5ldyBBcnJheSgpOwoga2V5c1sgNV0gPSBuZXcgQXJyYXkoKTsKIGtleXNbIDZdID0gbmV3IEFycmF5KCk7CiBrZXlzWyA3XSA9IG5ldyBBcnJheSgpOwoga2V5c1sgOF0gPSBuZXcgQXJyYXkoKTsKIGtleXNbIDldID0gbmV3IEFycmF5KCk7CiBrZXlzWzEwXSA9IG5ldyBBcnJheSgpOwoga2V5c1sxMV0gPSBuZXcgQXJyYXkoKTsKIGtleXNbMTJdID0gbmV3IEFycmF5KCk7CiBrZXlzWzEzXSA9IG5ldyBBcnJheSgpOwoga2V5c1sxNF0gPSBuZXcgQXJyYXkoKTsKIGtleXNbMTVdID0gbmV3IEFycmF5KCk7ICAKIHZhciBsb29wID0gWzEsMSwyLDIsMiwyLDIsMiwxLDIsMiwyLDIsMiwyLDFdOwoKIGZvcihpPTA7aTw3O2krKyl7CiAgIGZvcihqPTAsaz03O2o8ODtqKyssay0tKXsKICAgICBrZXlbaSo4K2pdPWtleUJ5dGVbOCprK2ldOwogICB9CiB9ICAgIAogCiB2YXIgaSA9IDA7CiBmb3IoaSA9IDA7aSA8IDE2O2kgKyspewogICB2YXIgdGVtcExlZnQ9MDsKICAgdmFyIHRlbXBSaWdodD0wOwogICBmb3IoaiA9IDA7IGogPCBsb29wW2ldO2ogKyspeyAgICAgICAgICAKICAgICB0ZW1wTGVmdCA9IGtleVswXTsKICAgICB0ZW1wUmlnaHQgPSBrZXlbMjhdOwogICAgIGZvcihrID0gMDtrIDwgMjcgO2sgKyspewogICAgICAga2V5W2tdID0ga2V5W2srMV07CiAgICAgICBrZXlbMjgra10gPSBrZXlbMjkra107CiAgICAgfSAgCiAgICAga2V5WzI3XT10ZW1wTGVmdDsKICAgICBrZXlbNTVdPXRlbXBSaWdodDsKICAgfQogICB2YXIgdGVtcEtleSA9IG5ldyBBcnJheSg0OCk7CiAgIHRlbXBLZXlbIDBdID0ga2V5WzEzXTsKICAgdGVtcEtleVsgMV0gPSBrZXlbMTZdOwogICB0ZW1wS2V5WyAyXSA9IGtleVsxMF07CiAgIHRlbXBLZXlbIDNdID0ga2V5WzIzXTsKICAgdGVtcEtleVsgNF0gPSBrZXlbIDBdOwogICB0ZW1wS2V5WyA1XSA9IGtleVsgNF07CiAgIHRlbXBLZXlbIDZdID0ga2V5WyAyXTsKICAgdGVtcEtleVsgN10gPSBrZXlbMjddOwogICB0ZW1wS2V5WyA4XSA9IGtleVsxNF07CiAgIHRlbXBLZXlbIDldID0ga2V5WyA1XTsKICAgdGVtcEtleVsxMF0gPSBrZXlbMjBdOwogICB0ZW1wS2V5WzExXSA9IGtleVsgOV07CiAgIHRlbXBLZXlbMTJdID0ga2V5WzIyXTsKICAgdGVtcEtleVsxM10gPSBrZXlbMThdOwogICB0ZW1wS2V5WzE0XSA9IGtleVsxMV07CiAgIHRlbXBLZXlbMTVdID0ga2V5WyAzXTsKICAgdGVtcEtleVsxNl0gPSBrZXlbMjVdOwogICB0ZW1wS2V5WzE3XSA9IGtleVsgN107CiAgIHRlbXBLZXlbMThdID0ga2V5WzE1XTsKICAgdGVtcEtleVsxOV0gPSBrZXlbIDZdOwogICB0ZW1wS2V5WzIwXSA9IGtleVsyNl07CiAgIHRlbXBLZXlbMjFdID0ga2V5WzE5XTsKICAgdGVtcEtleVsyMl0gPSBrZXlbMTJdOwogICB0ZW1wS2V5WzIzXSA9IGtleVsgMV07CiAgIHRlbXBLZXlbMjRdID0ga2V5WzQwXTsKICAgdGVtcEtleVsyNV0gPSBrZXlbNTFdOwogICB0ZW1wS2V5WzI2XSA9IGtleVszMF07CiAgIHRlbXBLZXlbMjddID0ga2V5WzM2XTsKICAgdGVtcEtleVsyOF0gPSBrZXlbNDZdOwogICB0ZW1wS2V5WzI5XSA9IGtleVs1NF07CiAgIHRlbXBLZXlbMzBdID0ga2V5WzI5XTsKICAgdGVtcEtleVszMV0gPSBrZXlbMzldOwogICB0ZW1wS2V5WzMyXSA9IGtleVs1MF07CiAgIHRlbXBLZXlbMzNdID0ga2V5WzQ0XTsKICAgdGVtcEtleVszNF0gPSBrZXlbMzJdOwogICB0ZW1wS2V5WzM1XSA9IGtleVs0N107CiAgIHRlbXBLZXlbMzZdID0ga2V5WzQzXTsKICAgdGVtcEtleVszN10gPSBrZXlbNDhdOwogICB0ZW1wS2V5WzM4XSA9IGtleVszOF07CiAgIHRlbXBLZXlbMzldID0ga2V5WzU1XTsKICAgdGVtcEtleVs0MF0gPSBrZXlbMzNdOwogICB0ZW1wS2V5WzQxXSA9IGtleVs1Ml07CiAgIHRlbXBLZXlbNDJdID0ga2V5WzQ1XTsKICAgdGVtcEtleVs0M10gPSBrZXlbNDFdOwogICB0ZW1wS2V5WzQ0XSA9IGtleVs0OV07CiAgIHRlbXBLZXlbNDVdID0ga2V5WzM1XTsKICAgdGVtcEtleVs0Nl0gPSBrZXlbMjhdOwogICB0ZW1wS2V5WzQ3XSA9IGtleVszMV07CiAgIHN3aXRjaChpKXsKICAgICBjYXNlIDA6IGZvcihtPTA7bSA8IDQ4IDttKyspeyBrZXlzWyAwXVttXSA9IHRlbXBLZXlbbV07IH0gYnJlYWs7CiAgICAgY2FzZSAxOiBmb3IobT0wO20gPCA0OCA7bSsrKXsga2V5c1sgMV1bbV0gPSB0ZW1wS2V5W21dOyB9IGJyZWFrOwogICAgIGNhc2UgMjogZm9yKG09MDttIDwgNDggO20rKyl7IGtleXNbIDJdW21dID0gdGVtcEtleVttXTsgfSBicmVhazsKICAgICBjYXNlIDM6IGZvcihtPTA7bSA8IDQ4IDttKyspeyBrZXlzWyAzXVttXSA9IHRlbXBLZXlbbV07IH0gYnJlYWs7CiAgICAgY2FzZSA0OiBmb3IobT0wO20gPCA0OCA7bSsrKXsga2V5c1sgNF1bbV0gPSB0ZW1wS2V5W21dOyB9IGJyZWFrOwogICAgIGNhc2UgNTogZm9yKG09MDttIDwgNDggO20rKyl7IGtleXNbIDVdW21dID0gdGVtcEtleVttXTsgfSBicmVhazsKICAgICBjYXNlIDY6IGZvcihtPTA7bSA8IDQ4IDttKyspeyBrZXlzWyA2XVttXSA9IHRlbXBLZXlbbV07IH0gYnJlYWs7CiAgICAgY2FzZSA3OiBmb3IobT0wO20gPCA0OCA7bSsrKXsga2V5c1sgN11bbV0gPSB0ZW1wS2V5W21dOyB9IGJyZWFrOwogICAgIGNhc2UgODogZm9yKG09MDttIDwgNDggO20rKyl7IGtleXNbIDhdW21dID0gdGVtcEtleVttXTsgfSBicmVhazsKICAgICBjYXNlIDk6IGZvcihtPTA7bSA8IDQ4IDttKyspeyBrZXlzWyA5XVttXSA9IHRlbXBLZXlbbV07IH0gYnJlYWs7CiAgICAgY2FzZSAxMDogZm9yKG09MDttIDwgNDggO20rKyl7IGtleXNbMTBdW21dID0gdGVtcEtleVttXTsgfSBicmVhazsKICAgICBjYXNlIDExOiBmb3IobT0wO20gPCA0OCA7bSsrKXsga2V5c1sxMV1bbV0gPSB0ZW1wS2V5W21dOyB9IGJyZWFrOwogICAgIGNhc2UgMTI6IGZvcihtPTA7bSA8IDQ4IDttKyspeyBrZXlzWzEyXVttXSA9IHRlbXBLZXlbbV07IH0gYnJlYWs7CiAgICAgY2FzZSAxMzogZm9yKG09MDttIDwgNDggO20rKyl7IGtleXNbMTNdW21dID0gdGVtcEtleVttXTsgfSBicmVhazsKICAgICBjYXNlIDE0OiBmb3IobT0wO20gPCA0OCA7bSsrKXsga2V5c1sxNF1bbV0gPSB0ZW1wS2V5W21dOyB9IGJyZWFrOwogICAgIGNhc2UgMTU6IGZvcihtPTA7bSA8IDQ4IDttKyspeyBrZXlzWzE1XVttXSA9IHRlbXBLZXlbbV07IH0gYnJlYWs7CiAgIH0KIH0KIHJldHVybiBrZXlzOyAgCn0KLy9lbmQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKLyoKICog5Yqg5a+G6Kej5a+GCiAqICovCnZhciBiYXNlNjRFbmNvZGVDaGFycyA9ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIjsKdmFyIGJhc2U2NERlY29kZUNoYXJzID0gbmV3IEFycmF5KC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwKICAgIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsCiAgICAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIDYyLCAtMSwgLTEsIC0xLAogICAgNjMsIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDU4LCA1OSwgNjAsIDYxLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwKICAgIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LAogICAgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgMjYsIDI3LCAyOCwgMjksIDMwLCAzMSwKICAgIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksCiAgICA1MCwgNTEsIC0xLCAtMSwgLTEsIC0xLCAtMSk7CmZ1bmN0aW9uIGJhc2U2NGVuY29kZShzdHIpIHsKICB2YXIgb3V0LCBpLCBsZW47CiAgdmFyIGMxLCBjMiwgYzM7CiAgbGVuID0gc3RyLmxlbmd0aDsKICBpID0gMDsKICBvdXQgPSAiIjsKICB3aGlsZSAoaSA8IGxlbikgewogICAgYzEgPSBzdHIuY2hhckNvZGVBdChpKyspICYgMHhmZjsKICAgIGlmIChpID09IGxlbikgewogICAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KGMxID4+IDIpOwogICAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KChjMSAmIDB4MykgPDwgNCk7CiAgICAgIG91dCArPSAiPT0iOwogICAgICBicmVhazsKICAgIH0KICAgIGMyID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgIGlmIChpID09IGxlbikgewogICAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KGMxID4+IDIpOwogICAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KCgoYzEgJiAweDMpIDw8IDQpCiAgICAgICAgICB8ICgoYzIgJiAweEYwKSA+PiA0KSk7CiAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKGMyICYgMHhGKSA8PCAyKTsKICAgICAgb3V0ICs9ICI9IjsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjMyA9IHN0ci5jaGFyQ29kZUF0KGkrKyk7CiAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KGMxID4+IDIpOwogICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoKGMxICYgMHgzKSA8PCA0KSB8ICgoYzIgJiAweEYwKSA+PiA0KSk7CiAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KCgoYzIgJiAweEYpIDw8IDIpIHwgKChjMyAmIDB4QzApID4+IDYpKTsKICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoYzMgJiAweDNGKTsKICB9CiAgcmV0dXJuIG91dDsKfQpmdW5jdGlvbiB1dGYxNnRvOChzdHIpIHsKICB2YXIgb3V0LCBpLCBsZW4sIGM7CiAgb3V0ID0gIiI7CiAgbGVuID0gc3RyLmxlbmd0aDsKICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTsKICAgIGlmICgoYyA+PSAweDAwMDEpICYmIChjIDw9IDB4MDA3RikpIHsKICAgICAgb3V0ICs9IHN0ci5jaGFyQXQoaSk7CiAgICB9IGVsc2UgaWYgKGMgPiAweDA3RkYpIHsKICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFMCB8ICgoYyA+PiAxMikgJiAweDBGKSk7CiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGMgPj4gNikgJiAweDNGKSk7CiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGMgPj4gMCkgJiAweDNGKSk7CiAgICB9IGVsc2UgewogICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEMwIHwgKChjID4+IDYpICYgMHgxRikpOwogICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgKChjID4+IDApICYgMHgzRikpOwogICAgfQogIH0KICByZXR1cm4gb3V0Owp9CmZ1bmN0aW9uIHV0Zjh0bzE2KHN0cikgewogIHZhciBvdXQsIGksIGxlbiwgYzsKICB2YXIgY2hhcjIsIGNoYXIzOwogIG91dCA9ICIiOwogIGxlbiA9IHN0ci5sZW5ndGg7CiAgaSA9IDA7CiAgd2hpbGUgKGkgPCBsZW4pIHsKICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKyspOwogICAgc3dpdGNoIChjID4+IDQpIHsKICAgIGNhc2UgMDoKICAgIGNhc2UgMToKICAgIGNhc2UgMjoKICAgIGNhc2UgMzoKICAgIGNhc2UgNDoKICAgIGNhc2UgNToKICAgIGNhc2UgNjoKICAgIGNhc2UgNzoKICAgICAgLy8gMHh4eHh4eHgKICAgICAgb3V0ICs9IHN0ci5jaGFyQXQoaSAtIDEpOwogICAgICBicmVhazsKICAgIGNhc2UgMTI6CiAgICBjYXNlIDEzOgogICAgICAvLyAxMTB4IHh4eHggMTB4eCB4eHh4CiAgICAgIGNoYXIyID0gc3RyLmNoYXJDb2RlQXQoaSsrKTsKICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgxRikgPDwgNikgfCAoY2hhcjIgJiAweDNGKSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAxNDoKICAgICAgLy8gMTExMCB4eHh4IDEweHggeHh4eCAxMHh4IHh4eHgKICAgICAgY2hhcjIgPSBzdHIuY2hhckNvZGVBdChpKyspOwogICAgICBjaGFyMyA9IHN0ci5jaGFyQ29kZUF0KGkrKyk7CiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MEYpIDw8IDEyKQogICAgICAgICAgfCAoKGNoYXIyICYgMHgzRikgPDwgNikgfCAoKGNoYXIzICYgMHgzRikgPDwgMCkpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIG91dDsKfQ==";

    @Override
    public HttpResult<Map<String, Object>> init(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            return result.success();
        } catch (Exception e) {
            logger.error("登录-->初始化失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.TASK_INIT_ERROR);
        }
    }

    @Override
    public HttpResult<String> refeshPicCode(OperatorParam param) {
        return new HttpResult<String>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<Map<String, Object>> refeshSmsCode(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return refeshSmsCodeForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return refeshSmsCodeForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> submit(OperatorParam param) {
        switch (param.getFormType()) {
            case FormType.LOGIN:
                return submitForLogin(param);
            case FormType.VALIDATE_BILL_DETAIL:
                return submitForBillDetail(param);
            default:
                return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
        }
    }

    @Override
    public HttpResult<Map<String, Object>> validatePicCode(OperatorParam param) {
        return new HttpResult<Map<String, Object>>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    @Override
    public HttpResult<Object> defineProcess(OperatorParam param) {
        return new HttpResult<Object>().failure(ErrorCode.NOT_SUPORT_METHOD);
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForLogin(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String referer = "http://www.hn.10086.cn/service/static/componant/login.html";
            String templateUrl = "http://www.hn.10086.cn/service/ics/login/sendSms?serialNumber={}&validateCode=&chanId=E003&operType=LOGIN" +
                    "&goodsName=发送短信验证码&loginType=2&ajaxSubmitType=post&ajax_randomcode={}";
            response = TaskHttpClient.create(param, RequestType.GET, "hu_nan_10086_web_001").setFullUrl(templateUrl, param.getMobile(), Math.random())
                    .setReferer(referer).invoke();
            if (StringUtils.contains(response.getPageContent(), "随机短信验证码已经下发")) {
                logger.info("登录-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("登录-->短信验证码-->刷新失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登录-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForLogin(OperatorParam param) {
        CheckUtils.checkNotBlank(param.getPassword(), ErrorCode.EMPTY_PASSWORD);
        CheckUtils.checkNotBlank(param.getSmsCode(), ErrorCode.EMPTY_SMS_CODE);
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("hu_nan_10086_web/des.js");
            Invocable invocable = ScriptEngineUtil.createInvocableFromBase64(javaScript);
            String encryptPassword = invocable.invokeFunction("strEnc", param.getPassword(), param.getMobile().toString().substring(0, 8),
                    param.getMobile().toString().substring(1, 9), param.getMobile().toString().substring(3, 11)).toString();

            BigDecimal db = new BigDecimal(Math.random() * (1 - 0) + 0);
            String referer = "http://www.hn.10086.cn/newservice/static/componant/login.html";
            String templateUrl = "http://www.hn.10086.cn/service/ics/login/SSOLogin?REMEMBER_TAG=false&SERIAL_NUMBER={}&LOGIN_TYPE=2&USER_PASSWD" +
                    "={}&USER_PASSSMS={}&VALIDATE_CODE=&chanId=E003&operType=LOGIN&goodsName=%E6%9C%8D%E5%8A%A1%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95" +
                    "&loginType=0&ajaxSubmitType=post&ajax_randomcode={}";
            //获取tokenId并追加到cookie
            String tokenId = db.setScale(17, BigDecimal.ROUND_HALF_UP).toString();
            TaskUtils.addTaskShare(param.getTaskId(), "tokenId", tokenId);

            response = TaskHttpClient.create(param, RequestType.POST, "hu_nan_10086_web_002")
                    .setFullUrl(templateUrl, param.getMobile(), encryptPassword, param.getSmsCode(), db.setScale(16, BigDecimal.ROUND_HALF_UP))
                    .setReferer(referer).addExtralCookie("www.hn.10086.cn", tokenId, "0").invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "登陆成功") || StringUtils.contains(pageContent, "ok")) {
                logger.info("登陆成功,param={}", param);
                return result.success();
            } else {
                logger.error("登陆失败,param={},response={}", param, response);
                return result.failure(ErrorCode.LOGIN_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("登陆失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.LOGIN_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> refeshSmsCodeForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String tokenId = TaskUtils.getTaskShare(param.getTaskId(), "tokenId");
            String referer = "http://www.hn.10086.cn/service/static/myMobile/detailBillQuery.html";
            String templateUrl = "http://www.hn.10086.cn/service/ics/componant/initTelQCellCore?tel={}&ajaxSubmitType=post&ajax_randomcode={}";
            response = TaskHttpClient.create(param, RequestType.GET, "hu_nan_10086_web_003").setFullUrl(templateUrl, param.getMobile(), tokenId)
                    .setReferer(referer).addHeader("Accept", "application/json, text/javascript, */*; q=0.01").invoke();

            referer = "http://www.hn.10086.cn/service/static/myMobile/detailBillQuery.html";
            templateUrl = "http://www.hn.10086.cn/service/ics/componant/initSendHattedCode?requestTel={}&ajaxSubmitType=post&ajax_randomcode={}";
            response = TaskHttpClient.create(param, RequestType.GET, "hu_nan_10086_web_004").setFullUrl(templateUrl, param.getMobile(), tokenId)
                    .setReferer(referer).addHeader("Accept", "application/json, text/javascript, */*; q=0.01").invoke();
            String pageContent = response.getPageContent();

            if (StringUtils.contains(pageContent, "短信密码已经发送到您的手机")) {
                logger.info("详单-->短信验证码-->刷新成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->短信验证码-->刷新失败,param={},pateContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.REFESH_SMS_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->短信验证码-->刷新失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.REFESH_SMS_ERROR);
        }
    }

    private HttpResult<Map<String, Object>> submitForBillDetail(OperatorParam param) {
        HttpResult<Map<String, Object>> result = new HttpResult<>();
        Response response = null;
        try {
            String tokenId = TaskUtils.getTaskShare(param.getTaskId(), "tokenId");
            String referer = "http://www.hn.10086.cn/service/static/myMobile/detailBillQuery.html";
            String templateUrl = "http://www.hn.10086.cn/service/ics/componant/initTelQCellCore?tel={}&ajaxSubmitType=post&ajax_randomcode={}";
            response = TaskHttpClient.create(param, RequestType.GET, "hu_nan_10086_web_005").setFullUrl(templateUrl, param.getMobile(), tokenId)
                    .setReferer(referer).addHeader("Accept", "application/json, text/javascript, */*; q=0.01").invoke();

            referer = "http://www.hn.10086.cn/service/static/myMobile/detailBillQuery.html";
            templateUrl = "http://www.hn.10086.cn/service/ics/componant/initSmsCodeAndServicePwd?smsCode={}&servicePwd=NaN&requestTel" +
                    "={}&ajaxSubmitType=post&ajax_randomcode={}";
            response = TaskHttpClient.create(param, RequestType.GET, "hu_nan_10086_web_006")
                    .setFullUrl(templateUrl, param.getSmsCode(), param.getMobile(), tokenId).setReferer(referer)
                    .addHeader("Accept", "application/json, text/javascript, */*; q=0.01").invoke();
            String pageContent = response.getPageContent();
            if (StringUtils.contains(pageContent, "resultCode\":0")) {
                logger.info("详单-->校验成功,param={}", param);
                return result.success();
            } else {
                logger.error("详单-->校验失败,param={},pageContent={}", param, response.getPageContent());
                return result.failure(ErrorCode.VALIDATE_UNEXPECTED_RESULT);
            }
        } catch (Exception e) {
            logger.error("详单-->校验失败,param={},response={}", param, response, e);
            return result.failure(ErrorCode.VALIDATE_ERROR);
        }
    }
}
