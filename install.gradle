def mainClass = 'com.datatrees.rawdatacentral.main.Application'
jar {
    sourceSets.main.resources.exclude('**/*')
//    sourceSets.main.resources.include('cacerts/*')
    def libs = "conf/";
    configurations.compile.each { libs += " lib/" + it.name }
    manifest {
        attributes 'Main-Class': mainClass
        attributes 'Class-Path': libs
    }
}

def buildTime = new Date().format("yyMMddHHmmss")

task copyResources() {
    doLast {
        delete {
            delete "$rootDir/target"
        }
        copy {
            from file("$buildDir/libs/$project.name-$version" + ".jar")
            into "$rootDir/target/$rootProject.name"
        }
        file("$rootDir/target/$rootProject.name/$project.name-$version" + ".jar").renameTo("$rootDir/target/$rootProject.name/$project.name" + ".jar");
        copy {
            from configurations.compile
            into "$rootDir/target/$rootProject.name/lib"
//            include ("rawdata*.jar")
        }
        copy {
            from "$rootDir/plugin"
            into "$rootDir/target/$rootProject.name/plugin"
        }
        copy {
            from "$rootDir/$project.name/src/main/resources"
            into "$rootDir/target/$rootProject.name/conf"
            exclude("*.properties")
        }
        copy {
            def env;
            if (project.hasProperty('env')) {
                // System.properties['env'] 系统属性会产生冲突，已有问题：shop-common库依赖env环境变量（ShopConfigClient）。所以改为使用profile，用法："gradle -Penv=xxx"
                env = project.env
            } else {
                println 'no project env defined, try system property env'
                // 为了更好地兼容升级过程，避免代码跟CI命令行参数配置不一致导致问题，还是检查一下env环境变量
                env = System.properties['env']
                if (env == null || env.equals("")) {
                    println 'no system property env defined, use inside-daily'
                    env = 'inside-daily'
                }
            }
            println 'env=' + env
            if (!['daily', 'gray', 'online'].contains(env)) {
                throw new RuntimeException("invalid env=" + env)
            }
            from "$rootDir/$project.name/env/$env"
            into "$rootDir/target/$rootProject.name/conf"
        }
        println "源码文件:$rootDir/target/$rootProject.name-$version-$buildTime" + ".tar.gz"
    }
}

task installApp(type: Tar, dependsOn: 'copyResources') {
    baseName = rootProject.name
    classifier = buildTime
    compression = Compression.GZIP
    destinationDir = file("$rootDir/target") //打包到目录下
    extension = 'tar.gz'
    into("$rootProject.name") {
        from "$rootDir/target/$rootProject.name"
    }
}